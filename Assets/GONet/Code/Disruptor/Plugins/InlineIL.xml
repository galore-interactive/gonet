<?xml version="1.0"?>
<doc>
    <assembly>
        <name>InlineIL</name>
    </assembly>
    <members>
        <member name="T:InlineIL.BinaryOperator">
            <summary>
            Binary operator.
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Addition">
            <summary>
            <c>op_Addition</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Subtraction">
            <summary>
            <c>op_Subtraction</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Multiply">
            <summary>
            <c>op_Multiply</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Division">
            <summary>
            <c>op_Division</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Modulus">
            <summary>
            <c>op_Modulus</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.ExclusiveOr">
            <summary>
            <c>op_ExclusiveOr</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.BitwiseAnd">
            <summary>
            <c>op_BitwiseAnd</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.BitwiseOr">
            <summary>
            <c>op_BitwiseOr</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.LogicalAnd">
            <summary>
            <c>op_LogicalAnd</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.LogicalOr">
            <summary>
            <c>op_LogicalOr</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Assign">
            <summary>
            <c>op_Assign</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.LeftShift">
            <summary>
            <c>op_LeftShift</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.RightShift">
            <summary>
            <c>op_RightShift</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.SignedRightShift">
            <summary>
            <c>op_SignedRightShift</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.UnsignedRightShift">
            <summary>
            <c>op_UnsignedRightShift</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Equality">
            <summary>
            <c>op_Equality</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.GreaterThan">
            <summary>
            <c>op_GreaterThan</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.LessThan">
            <summary>
            <c>op_LessThan</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Inequality">
            <summary>
            <c>op_Inequality</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.GreaterThanOrEqual">
            <summary>
            <c>op_GreaterThanOrEqual</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.LessThanOrEqual">
            <summary>
            <c>op_LessThanOrEqual</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.UnsignedRightShiftAssignment">
            <summary>
            <c>op_UnsignedRightShiftAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.MemberSelection">
            <summary>
            <c>op_MemberSelection</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.RightShiftAssignment">
            <summary>
            <c>op_RightShiftAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.MultiplicationAssignment">
            <summary>
            <c>op_MultiplicationAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.PointerToMemberSelection">
            <summary>
            <c>op_PointerToMemberSelection</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.SubtractionAssignment">
            <summary>
            <c>op_SubtractionAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.ExclusiveOrAssignment">
            <summary>
            <c>op_ExclusiveOrAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.LeftShiftAssignment">
            <summary>
            <c>op_LeftShiftAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.ModulusAssignment">
            <summary>
            <c>op_ModulusAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.AdditionAssignment">
            <summary>
            <c>op_AdditionAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.BitwiseAndAssignment">
            <summary>
            <c>op_BitwiseAndAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.BitwiseOrAssignment">
            <summary>
            <c>op_BitwiseOrAssignment</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.Comma">
            <summary>
            <c>op_Comma</c>
            </summary>
        </member>
        <member name="F:InlineIL.BinaryOperator.DivisionAssignment">
            <summary>
            <c>op_DivisionAssignment</c>
            </summary>
        </member>
        <member name="T:InlineIL.ConversionDirection">
            <summary>
            Conversion direction.
            </summary>
        </member>
        <member name="F:InlineIL.ConversionDirection.From">
            <summary>
            Convert from the other type.
            </summary>
        </member>
        <member name="F:InlineIL.ConversionDirection.To">
            <summary>
            Convert to the other type.
            </summary>
        </member>
        <member name="T:InlineIL.ConversionOperator">
            <summary>
            Conversion operator.
            </summary>
        </member>
        <member name="F:InlineIL.ConversionOperator.Implicit">
            <summary>
            <c>op_Implicit</c>
            </summary>
        </member>
        <member name="F:InlineIL.ConversionOperator.Explicit">
            <summary>
            <c>op_Explicit</c>
            </summary>
        </member>
        <member name="T:InlineIL.FieldRef">
            <summary>
            Represents a field reference.
            </summary>
        </member>
        <member name="M:InlineIL.FieldRef.#ctor(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a field reference.
            </summary>
            <param name="type">The field type.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="M:InlineIL.FieldRef.Field(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a field reference.
            </summary>
            <param name="type">The field type.</param>
            <param name="fieldName">The field name.</param>
        </member>
        <member name="T:InlineIL.GenericParameters">
            <summary>
            Represents a list of generic parameters.
            </summary>
            <remarks>
            Use the indexer to retrieve a given parameter.
            </remarks>
        </member>
        <member name="P:InlineIL.GenericParameters.Item(System.Int32)">
            <summary>
            Gets the generic parameter type at the specified index.
            </summary>
            <param name="index">The index of the generic parameter type to get.</param>
        </member>
        <member name="T:InlineIL.IL">
            <summary>
            Injects IL code to the calling method, using InlineIL.Fody.
            All method calls are replaced at weaving time.
            </summary>
        </member>
        <member name="M:InlineIL.IL.DeclareLocals(InlineIL.LocalVar[])">
            <summary>
            Declares local variables, with the <c>init</c> flag set to true.
            </summary>
            <remarks>
            <para>
            These variables are appended to the ones already declared by the compiler,
            but indexes of emitted <c>ldloc</c>/<c>stloc</c> instructions are adjusted to account for that.
            </para>
            <para>
            The <c>init</c> flag applies to all locals, including the ones declared by the compiler,
            and space allocated in the stack frame by <c>localloc</c>.
            </para>
            </remarks>
            <param name="locals">The list of local variable declarations.</param>
        </member>
        <member name="M:InlineIL.IL.DeclareLocals(System.Boolean,InlineIL.LocalVar[])">
            <summary>
            Declares local variables.
            </summary>
            <remarks>
            <para>
            These variables are appended to the ones already declared by the compiler,
            but indexes of emitted <c>ldloc</c>/<c>stloc</c> instructions are adjusted to account for that.
            </para>
            <para>
            The <c>init</c> flag applies to all locals, including the ones declared by the compiler,
            and space allocated in the stack frame by <c>localloc</c>.
            Setting this to <c>false</c> will cause the method to be unverifiable.
            </para>
            </remarks>
            <param name="init">Flag which specifies if the local variables should be zero initialized.</param>
            <param name="locals">The list of local variable declarations.</param>
        </member>
        <member name="M:InlineIL.IL.MarkLabel(System.String)">
            <summary>
            Marks the current code position with the given label.
            </summary>
            <param name="labelName">The label name.</param>
        </member>
        <member name="M:InlineIL.IL.Push``1(``0)">
            <summary>
            Pushes a value onto the evaluation stack.
            </summary>
            <typeparam name="T">The type of the value to push.</typeparam>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:InlineIL.IL.Push``1(``0@)">
            <summary>
            Pushes a reference onto the evaluation stack.
            </summary>
            <typeparam name="T">The reference target type.</typeparam>
            <param name="value">The reference to push.</param>
        </member>
        <member name="M:InlineIL.IL.Push(System.Void*)">
            <summary>
            Pushes a pointer onto the evaluation stack.
            </summary>
            <param name="value">The pointer to push.</param>
        </member>
        <member name="M:InlineIL.IL.PushInRef``1(``0@)">
            <summary>
            Pushes a read-only reference onto the evaluation stack.
            </summary>
            <typeparam name="T">The reference target type.</typeparam>
            <param name="value">The reference to push.</param>
        </member>
        <member name="M:InlineIL.IL.PushOutRef``1(``0@)">
            <summary>
            Pushes an output reference onto the evaluation stack.
            </summary>
            <typeparam name="T">The reference target type.</typeparam>
            <param name="value">The reference to push.</param>
        </member>
        <member name="M:InlineIL.IL.Pop``1(``0@)">
            <summary>
            Pops a value from the top of the evaluation stack into a local variable.
            </summary>
            <typeparam name="T">The type of the value to pop.</typeparam>
            <param name="value">A reference to a local variable receiving the value.</param>
        </member>
        <member name="M:InlineIL.IL.Pop``1(``0*@)">
            <summary>
            Pops a pointer from the top of the evaluation stack into a local variable.
            </summary>
            <typeparam name="T">The type of the pointer to pop.</typeparam>
            <param name="value">A reference to a local variable receiving the pointer.</param>
        </member>
        <member name="M:InlineIL.IL.Pop(System.Void*@)">
            <summary>
            Pops a pointer from the top of the evaluation stack into a local variable.
            </summary>
            <param name="value">A reference to a local variable receiving the pointer.</param>
        </member>
        <member name="M:InlineIL.IL.Unreachable">
            <summary>
            Marks the given region of code as unreachable, for example just after a <c>ret</c> instruction.
            </summary>
            <remarks>
            This method returns an <see cref="T:System.Exception"/> which should be immediately thrown by the caller.
            It enables writing code with a valid control flow for compile-time.
            </remarks>
            <returns>An <see cref="T:System.Exception"/> which should be immediately thrown.</returns>
        </member>
        <member name="M:InlineIL.IL.Return``1">
            <summary>
            Returns the value on top of the evaluation stack.
            </summary>
            <remarks>
            The return value of this method should be immediately returned from the weaved method.
            This is an alternative to emitting a <c>ret</c> instruction followed by a call to <see cref="M:InlineIL.IL.Unreachable"/>.
            </remarks>
            <typeparam name="T">The returned value type.</typeparam>
            <returns>The value on top of the evaluation stack, which should be immediately returned from the method.</returns>
        </member>
        <member name="M:InlineIL.IL.ReturnRef``1">
            <summary>
            Returns the reference on top of the evaluation stack.
            </summary>
            <remarks>
            The return value of this method should be immediately returned from the weaved method.
            This is an alternative to emitting a <c>ret</c> instruction followed by a call to <see cref="M:InlineIL.IL.Unreachable"/>.
            </remarks>
            <typeparam name="T">The returned reference type.</typeparam>
            <returns>The reference on top of the evaluation stack, which should be immediately returned from the method.</returns>
        </member>
        <member name="M:InlineIL.IL.ReturnPointer``1">
            <summary>
            Returns the pointer on top of the evaluation stack.
            </summary>
            <remarks>
            The return value of this method should be immediately returned from the weaved method.
            This is an alternative to emitting a <c>ret</c> instruction followed by a call to <see cref="M:InlineIL.IL.Unreachable"/>.
            </remarks>
            <typeparam name="T">The returned pointer type.</typeparam>
            <returns>The pointer on top of the evaluation stack, which should be immediately returned from the method.</returns>
        </member>
        <member name="M:InlineIL.IL.ReturnPointer">
            <summary>
            Returns the pointer on top of the evaluation stack.
            </summary>
            <remarks>
            The return value of this method should be immediately returned from the weaved method.
            This is an alternative to emitting a <c>ret</c> instruction followed by a call to <see cref="M:InlineIL.IL.Unreachable"/>.
            </remarks>
            <returns>The pointer on top of the evaluation stack, which should be immediately returned from the method.</returns>
        </member>
        <member name="M:InlineIL.IL.EnsureLocal``1(``0@)">
            <summary>
            Ensures the compiler emits a local variable in IL for the variable passed as parameter in optimized builds.
            </summary>
            <remarks>
            This should make the variable usable in <c>IL.Push</c> calls that would otherwise fail.
            </remarks>
            <param name="value">A non-ref local variable.</param>
            <typeparam name="T">The type of the local variable.</typeparam>
        </member>
        <member name="T:InlineIL.IL.Emit">
            <summary>
            Emits an IL instruction.
            </summary>
        </member>
        <member name="M:InlineIL.IL.Emit.Nop">
            <summary>
            <c>nop</c> - Fills space if opcodes are patched. No meaningful operation is performed although a processing cycle can be consumed.
            </summary>
            <remarks>
            <para>Stack Transition: none</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Break">
            <summary>
            <c>break</c> - Signals the Common Language Infrastructure (CLI) to inform the debugger that a break point has been tripped.
            </summary>
            <remarks>
            <para>Stack Transition: none</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarg_0">
            <summary>
            <c>ldarg.0</c> - Loads the argument at index 0 onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarg_1">
            <summary>
            <c>ldarg.1</c> - Loads the argument at index 1 onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarg_2">
            <summary>
            <c>ldarg.2</c> - Loads the argument at index 2 onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarg_3">
            <summary>
            <c>ldarg.3</c> - Loads the argument at index 3 onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloc_0">
            <summary>
            <c>ldloc.0</c> - Loads the local variable at index 0 onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloc_1">
            <summary>
            <c>ldloc.1</c> - Loads the local variable at index 1 onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloc_2">
            <summary>
            <c>ldloc.2</c> - Loads the local variable at index 2 onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloc_3">
            <summary>
            <c>ldloc.3</c> - Loads the local variable at index 3 onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stloc_0">
            <summary>
            <c>stloc.0</c> - Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 0.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stloc_1">
            <summary>
            <c>stloc.1</c> - Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 1.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stloc_2">
            <summary>
            <c>stloc.2</c> - Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 2.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stloc_3">
            <summary>
            <c>stloc.3</c> - Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index 3.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarg_S(System.String)">
            <summary>
            <c>ldarg.s</c> - Loads the argument (referenced by a specified short form index) onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="name">The parameter name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarg_S(System.Byte)">
            <summary>
            <c>ldarg.s</c> - Loads the argument (referenced by a specified short form index) onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="index">The argument index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarga_S(System.String)">
            <summary>
            <c>ldarga.s</c> - Load an argument address, in short form, onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="name">The parameter name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarga_S(System.Byte)">
            <summary>
            <c>ldarga.s</c> - Load an argument address, in short form, onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="index">The argument index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Starg_S(System.String)">
            <summary>
            <c>starg.s</c> - Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="name">The parameter name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Starg_S(System.Byte)">
            <summary>
            <c>starg.s</c> - Stores the value on top of the evaluation stack in the argument slot at a specified index, short form.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="index">The argument index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloc_S(System.String)">
            <summary>
            <c>ldloc.s</c> - Loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="name">The local variable name, declared with <see cref="M:InlineIL.IL.DeclareLocals(InlineIL.LocalVar[])" />.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloc_S(System.Byte)">
            <summary>
            <c>ldloc.s</c> - Loads the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="index">The local variable index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloca_S(System.String)">
            <summary>
            <c>ldloca.s</c> - Loads the address of the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="name">The local variable name, declared with <see cref="M:InlineIL.IL.DeclareLocals(InlineIL.LocalVar[])" />.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloca_S(System.Byte)">
            <summary>
            <c>ldloca.s</c> - Loads the address of the local variable at a specific index onto the evaluation stack, short form.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="index">The local variable index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stloc_S(System.String)">
            <summary>
            <c>stloc.s</c> - Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index (short form).
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="name">The local variable name, declared with <see cref="M:InlineIL.IL.DeclareLocals(InlineIL.LocalVar[])" />.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stloc_S(System.Byte)">
            <summary>
            <c>stloc.s</c> - Pops the current value from the top of the evaluation stack and stores it in a the local variable list at index (short form).
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="index">The local variable index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldnull">
            <summary>
            <c>ldnull</c> - Pushes a null reference (type O) onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., O</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_M1">
            <summary>
            <c>ldc.i4.m1</c> - Pushes the integer value of -1 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_0">
            <summary>
            <c>ldc.i4.0</c> - Pushes the integer value of 0 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_1">
            <summary>
            <c>ldc.i4.1</c> - Pushes the integer value of 1 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_2">
            <summary>
            <c>ldc.i4.2</c> - Pushes the integer value of 2 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_3">
            <summary>
            <c>ldc.i4.3</c> - Pushes the integer value of 3 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_4">
            <summary>
            <c>ldc.i4.4</c> - Pushes the integer value of 4 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_5">
            <summary>
            <c>ldc.i4.5</c> - Pushes the integer value of 5 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_6">
            <summary>
            <c>ldc.i4.6</c> - Pushes the integer value of 6 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_7">
            <summary>
            <c>ldc.i4.7</c> - Pushes the integer value of 7 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_8">
            <summary>
            <c>ldc.i4.8</c> - Pushes the integer value of 8 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4_S(System.SByte)">
            <summary>
            <c>ldc.i4.s</c> - Pushes the supplied int8 value onto the evaluation stack as an int32, short form.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I4(System.Int32)">
            <summary>
            <c>ldc.i4</c> - Pushes a supplied value of type int32 onto the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_I8(System.Int64)">
            <summary>
            <c>ldc.i8</c> - Pushes a supplied value of type int64 onto the evaluation stack as an int64.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I8</para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_R4(System.Single)">
            <summary>
            <c>ldc.r4</c> - Pushes a supplied value of type float32 onto the evaluation stack as type F (float).
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., R4</para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldc_R8(System.Double)">
            <summary>
            <c>ldc.r8</c> - Pushes a supplied value of type float64 onto the evaluation stack as type F (float).
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., R8</para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Dup">
            <summary>
            <c>dup</c> - Copies the current topmost value on the evaluation stack, and then pushes the copy onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., value, value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Pop">
            <summary>
            <c>pop</c> - Removes the value currently on top of the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Jmp(InlineIL.MethodRef)">
            <summary>
            <c>jmp</c> - Exits current method and jumps to specified method.
            </summary>
            <remarks>
            <para>Stack Transition: none</para>
            </remarks>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Call(InlineIL.MethodRef)">
            <summary>
            <c>call</c> - Calls the method indicated by the passed method descriptor.
            </summary>
            <remarks>
            <para>Stack Transition: ..., arg0, arg1, ..., argN -&gt; ..., return value (if callee does not return <c>void</c>)</para>
            </remarks>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Calli(InlineIL.StandAloneMethodSig)">
            <summary>
            <c>calli</c> - Calls the method indicated on the evaluation stack (as a pointer to an entry point) with arguments described by a calling convention.
            </summary>
            <remarks>
            <para>Stack Transition: ..., arg0, arg1, ..., argN -&gt; ..., return value (if callee does not return <c>void</c>)</para>
            </remarks>
            <param name="signature">The method signature.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ret">
            <summary>
            <c>ret</c> - Returns from the current method, pushing a return value (if present) from the callee's evaluation stack onto the caller's evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., return value (if method does not return <c>void</c>) -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Br_S(System.String)">
            <summary>
            <c>br.s</c> - Unconditionally transfers control to a target instruction (short form).
            </summary>
            <remarks>
            <para>Stack Transition: none</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Brfalse_S(System.String)">
            <summary>
            <c>brfalse.s</c> - Transfers control to a target instruction if value is false, a null reference, or zero.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Brtrue_S(System.String)">
            <summary>
            <c>brtrue.s</c> - Transfers control to a target instruction (short form) if value is true, not null, or non-zero.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Beq_S(System.String)">
            <summary>
            <c>beq.s</c> - Transfers control to a target instruction (short form) if two values are equal.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bge_S(System.String)">
            <summary>
            <c>bge.s</c> - Transfers control to a target instruction (short form) if the first value is greater than or equal to the second value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bgt_S(System.String)">
            <summary>
            <c>bgt.s</c> - Transfers control to a target instruction (short form) if the first value is greater than the second value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ble_S(System.String)">
            <summary>
            <c>ble.s</c> - Transfers control to a target instruction (short form) if the first value is less than or equal to the second value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Blt_S(System.String)">
            <summary>
            <c>blt.s</c> - Transfers control to a target instruction (short form) if the first value is less than the second value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bne_Un_S(System.String)">
            <summary>
            <c>bne.un.s</c> - Transfers control to a target instruction (short form) when two unsigned integer values or unordered float values are not equal.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bge_Un_S(System.String)">
            <summary>
            <c>bge.un.s</c> - Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bgt_Un_S(System.String)">
            <summary>
            <c>bgt.un.s</c> - Transfers control to a target instruction (short form) if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ble_Un_S(System.String)">
            <summary>
            <c>ble.un.s</c> - Transfers control to a target instruction (short form) if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Blt_Un_S(System.String)">
            <summary>
            <c>blt.un.s</c> - Transfers control to a target instruction (short form) if the first value is less than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Br(System.String)">
            <summary>
            <c>br</c> - Unconditionally transfers control to a target instruction.
            </summary>
            <remarks>
            <para>Stack Transition: none</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Brfalse(System.String)">
            <summary>
            <c>brfalse</c> - Transfers control to a target instruction if value is false, a null reference (Nothing in Visual Basic), or zero.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Brtrue(System.String)">
            <summary>
            <c>brtrue</c> - Transfers control to a target instruction if value is true, not null, or non-zero.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Beq(System.String)">
            <summary>
            <c>beq</c> - Transfers control to a target instruction if two values are equal.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bge(System.String)">
            <summary>
            <c>bge</c> - Transfers control to a target instruction if the first value is greater than or equal to the second value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bgt(System.String)">
            <summary>
            <c>bgt</c> - Transfers control to a target instruction if the first value is greater than the second value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ble(System.String)">
            <summary>
            <c>ble</c> - Transfers control to a target instruction if the first value is less than or equal to the second value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Blt(System.String)">
            <summary>
            <c>blt</c> - Transfers control to a target instruction if the first value is less than the second value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bne_Un(System.String)">
            <summary>
            <c>bne.un</c> - Transfers control to a target instruction when two unsigned integer values or unordered float values are not equal.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bge_Un(System.String)">
            <summary>
            <c>bge.un</c> - Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Bgt_Un(System.String)">
            <summary>
            <c>bgt.un</c> - Transfers control to a target instruction if the first value is greater than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ble_Un(System.String)">
            <summary>
            <c>ble.un</c> - Transfers control to a target instruction if the first value is less than or equal to the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Blt_Un(System.String)">
            <summary>
            <c>blt.un</c> - Transfers control to a target instruction if the first value is less than the second value, when comparing unsigned integer values or unordered float values.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ...</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Switch(System.String[])">
            <summary>
            <c>switch</c> - Implements a jump table.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ...</para>
            </remarks>
            <param name="labelNames">The target label names.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_I1">
            <summary>
            <c>ldind.i1</c> - Loads a value of type int8 as an int32 onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_U1">
            <summary>
            <c>ldind.u1</c> - Loads a value of type unsigned int8 as an int32 onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_I2">
            <summary>
            <c>ldind.i2</c> - Loads a value of type int16 as an int32 onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_U2">
            <summary>
            <c>ldind.u2</c> - Loads a value of type unsigned int16 as an int32 onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_I4">
            <summary>
            <c>ldind.i4</c> - Loads a value of type int32 as an int32 onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_U4">
            <summary>
            <c>ldind.u4</c> - Loads a value of type unsigned int32 as an int32 onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_I8">
            <summary>
            <c>ldind.i8</c> - Loads a value of type int64 as an int64 onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_I">
            <summary>
            <c>ldind.i</c> - Loads a value of type native int as a native int onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_R4">
            <summary>
            <c>ldind.r4</c> - Loads a value of type float32 as a type F (float) onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., R4</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_R8">
            <summary>
            <c>ldind.r8</c> - Loads a value of type float64 as a type F (float) onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., R8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldind_Ref">
            <summary>
            <c>ldind.ref</c> - Loads an object reference as a type O (object reference) onto the evaluation stack indirectly.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., O</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stind_Ref">
            <summary>
            <c>stind.ref</c> - Stores a object reference value at a supplied address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stind_I1">
            <summary>
            <c>stind.i1</c> - Stores a value of type int8 at a supplied address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stind_I2">
            <summary>
            <c>stind.i2</c> - Stores a value of type int16 at a supplied address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stind_I4">
            <summary>
            <c>stind.i4</c> - Stores a value of type int32 at a supplied address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stind_I8">
            <summary>
            <c>stind.i8</c> - Stores a value of type int64 at a supplied address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I8 -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stind_R4">
            <summary>
            <c>stind.r4</c> - Stores a value of type float32 at a supplied address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, R4 -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stind_R8">
            <summary>
            <c>stind.r8</c> - Stores a value of type float64 at a supplied address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, R8 -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Add">
            <summary>
            <c>add</c> - Adds two values and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Sub">
            <summary>
            <c>sub</c> - Subtracts one value from another and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Mul">
            <summary>
            <c>mul</c> - Multiplies two values and pushes the result on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Div">
            <summary>
            <c>div</c> - Divides two values and pushes the result as a floating-point (type F) or quotient (type int32) onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Div_Un">
            <summary>
            <c>div.un</c> - Divides two unsigned integer values and pushes the result (int32) onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Rem">
            <summary>
            <c>rem</c> - Divides two values and pushes the remainder onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Rem_Un">
            <summary>
            <c>rem.un</c> - Divides two unsigned values and pushes the remainder onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.And">
            <summary>
            <c>and</c> - Computes the bitwise AND of two values and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Or">
            <summary>
            <c>or</c> - Compute the bitwise complement of the two integer values on top of the stack and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Xor">
            <summary>
            <c>xor</c> - Computes the bitwise XOR of the top two values on the evaluation stack, pushing the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Shl">
            <summary>
            <c>shl</c> - Shifts an integer value to the left (in zeroes) by a specified number of bits, pushing the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Shr">
            <summary>
            <c>shr</c> - Shifts an integer value (in sign) to the right by a specified number of bits, pushing the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Shr_Un">
            <summary>
            <c>shr.un</c> - Shifts an unsigned integer value (in zeroes) to the right by a specified number of bits, pushing the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Neg">
            <summary>
            <c>neg</c> - Negates a value and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Not">
            <summary>
            <c>not</c> - Computes the bitwise complement of the integer value on top of the stack and pushes the result onto the evaluation stack as the same type.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_I1">
            <summary>
            <c>conv.i1</c> - Converts the value on top of the evaluation stack to int8, then extends (pads) it to int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_I2">
            <summary>
            <c>conv.i2</c> - Converts the value on top of the evaluation stack to int16, then extends (pads) it to int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_I4">
            <summary>
            <c>conv.i4</c> - Converts the value on top of the evaluation stack to int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_I8">
            <summary>
            <c>conv.i8</c> - Converts the value on top of the evaluation stack to int64.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_R4">
            <summary>
            <c>conv.r4</c> - Converts the value on top of the evaluation stack to float32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., R4</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_R8">
            <summary>
            <c>conv.r8</c> - Converts the value on top of the evaluation stack to float64.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., R8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_U4">
            <summary>
            <c>conv.u4</c> - Converts the value on top of the evaluation stack to unsigned int32, and extends it to int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_U8">
            <summary>
            <c>conv.u8</c> - Converts the value on top of the evaluation stack to unsigned int64, and extends it to int64.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Callvirt(InlineIL.MethodRef)">
            <summary>
            <c>callvirt</c> - Calls a late-bound method on an object, pushing the return value onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., arg0, arg1, ..., argN -&gt; ..., return value (if callee does not return <c>void</c>)</para>
            </remarks>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Cpobj(InlineIL.TypeRef)">
            <summary>
            <c>cpobj</c> - Copies the value type located at the address of an object (type &amp;, * or native int) to the address of the destination object (type &amp;, * or native int).
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I -&gt; ...</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Cpobj``1">
            <summary>
            <c>cpobj</c> - Copies the value type located at the address of an object (type &amp;, * or native int) to the address of the destination object (type &amp;, * or native int).
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I -&gt; ...</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldobj(InlineIL.TypeRef)">
            <summary>
            <c>ldobj</c> - Copies the value type object pointed to by an address to the top of the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., value</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldobj``1">
            <summary>
            <c>ldobj</c> - Copies the value type object pointed to by an address to the top of the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., value</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldstr(System.String)">
            <summary>
            <c>ldstr</c> - Pushes a new object reference to a string literal stored in the metadata.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., O</para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Newobj(InlineIL.MethodRef)">
            <summary>
            <c>newobj</c> - Creates a new object or a new instance of a value type, pushing an object reference (type O) onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., arg0, arg1, ..., argN -&gt; ..., O</para>
            </remarks>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Castclass(InlineIL.TypeRef)">
            <summary>
            <c>castclass</c> - Attempts to cast an object passed by reference to the specified class.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., O</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Castclass``1">
            <summary>
            <c>castclass</c> - Attempts to cast an object passed by reference to the specified class.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., O</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Isinst(InlineIL.TypeRef)">
            <summary>
            <c>isinst</c> - Tests whether an object reference (type O) is an instance of a particular class.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., I</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Isinst``1">
            <summary>
            <c>isinst</c> - Tests whether an object reference (type O) is an instance of a particular class.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., I</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_R_Un">
            <summary>
            <c>conv.r.un</c> - Converts the unsigned integer value on top of the evaluation stack to float32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., R8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Unbox(InlineIL.TypeRef)">
            <summary>
            <c>unbox</c> - Converts the boxed representation of a value type to its unboxed form.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., I</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Unbox``1">
            <summary>
            <c>unbox</c> - Converts the boxed representation of a value type to its unboxed form.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., I</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Throw">
            <summary>
            <c>throw</c> - Throws the exception object currently on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldfld(InlineIL.FieldRef)">
            <summary>
            <c>ldfld</c> - Finds the value of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., value</para>
            </remarks>
            <param name="field">The field reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldflda(InlineIL.FieldRef)">
            <summary>
            <c>ldflda</c> - Finds the address of a field in the object whose reference is currently on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., I</para>
            </remarks>
            <param name="field">The field reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stfld(InlineIL.FieldRef)">
            <summary>
            <c>stfld</c> - Replaces the value stored in the field of an object reference or pointer with a new value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, value -&gt; ...</para>
            </remarks>
            <param name="field">The field reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldsfld(InlineIL.FieldRef)">
            <summary>
            <c>ldsfld</c> - Pushes the value of a static field onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="field">The field reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldsflda(InlineIL.FieldRef)">
            <summary>
            <c>ldsflda</c> - Pushes the address of a static field onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="field">The field reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stsfld(InlineIL.FieldRef)">
            <summary>
            <c>stsfld</c> - Replaces the value of a static field with a value from the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="field">The field reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stobj(InlineIL.TypeRef)">
            <summary>
            <c>stobj</c> - Copies a value of a specified type from the evaluation stack into a supplied memory address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, value -&gt; ...</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stobj``1">
            <summary>
            <c>stobj</c> - Copies a value of a specified type from the evaluation stack into a supplied memory address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, value -&gt; ...</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I1_Un">
            <summary>
            <c>conv.ovf.i1.un</c> - Converts the unsigned value on top of the evaluation stack to signed int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I2_Un">
            <summary>
            <c>conv.ovf.i2.un</c> - Converts the unsigned value on top of the evaluation stack to signed int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I4_Un">
            <summary>
            <c>conv.ovf.i4.un</c> - Converts the unsigned value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I8_Un">
            <summary>
            <c>conv.ovf.i8.un</c> - Converts the unsigned value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U1_Un">
            <summary>
            <c>conv.ovf.u1.un</c> - Converts the unsigned value on top of the evaluation stack to unsigned int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U2_Un">
            <summary>
            <c>conv.ovf.u2.un</c> - Converts the unsigned value on top of the evaluation stack to unsigned int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U4_Un">
            <summary>
            <c>conv.ovf.u4.un</c> - Converts the unsigned value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U8_Un">
            <summary>
            <c>conv.ovf.u8.un</c> - Converts the unsigned value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I_Un">
            <summary>
            <c>conv.ovf.i.un</c> - Converts the unsigned value on top of the evaluation stack to signed native int, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U_Un">
            <summary>
            <c>conv.ovf.u.un</c> - Converts the unsigned value on top of the evaluation stack to unsigned native int, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Box(InlineIL.TypeRef)">
            <summary>
            <c>box</c> - Converts a value type to an object reference (type O).
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., O</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Box``1">
            <summary>
            <c>box</c> - Converts a value type to an object reference (type O).
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., O</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Newarr(InlineIL.TypeRef)">
            <summary>
            <c>newarr</c> - Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., O</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Newarr``1">
            <summary>
            <c>newarr</c> - Pushes an object reference to a new zero-based, one-dimensional array whose elements are of a specific type onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., O</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldlen">
            <summary>
            <c>ldlen</c> - Pushes the number of elements of a zero-based, one-dimensional array onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelema(InlineIL.TypeRef)">
            <summary>
            <c>ldelema</c> - Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &amp; (managed pointer).
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelema``1">
            <summary>
            <c>ldelema</c> - Loads the address of the array element at a specified array index onto the top of the evaluation stack as type &amp; (managed pointer).
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_I1">
            <summary>
            <c>ldelem.i1</c> - Loads the element with type int8 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_U1">
            <summary>
            <c>ldelem.u1</c> - Loads the element with type unsigned int8 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_I2">
            <summary>
            <c>ldelem.i2</c> - Loads the element with type int16 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_U2">
            <summary>
            <c>ldelem.u2</c> - Loads the element with type unsigned int16 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_I4">
            <summary>
            <c>ldelem.i4</c> - Loads the element with type int32 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_U4">
            <summary>
            <c>ldelem.u4</c> - Loads the element with type unsigned int32 at a specified array index onto the top of the evaluation stack as an int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_I8">
            <summary>
            <c>ldelem.i8</c> - Loads the element with type int64 at a specified array index onto the top of the evaluation stack as an int64.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_I">
            <summary>
            <c>ldelem.i</c> - Loads the element with type native int at a specified array index onto the top of the evaluation stack as a native int.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_R4">
            <summary>
            <c>ldelem.r4</c> - Loads the element with type float32 at a specified array index onto the top of the evaluation stack as type F (float).
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., R4</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_R8">
            <summary>
            <c>ldelem.r8</c> - Loads the element with type float64 at a specified array index onto the top of the evaluation stack as type F (float).
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., R8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_Ref">
            <summary>
            <c>ldelem.ref</c> - Loads the element containing an object reference at a specified array index onto the top of the evaluation stack as type O (object reference).
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., O</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_I">
            <summary>
            <c>stelem.i</c> - Replaces the array element at a given index with the native int value on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_I1">
            <summary>
            <c>stelem.i1</c> - Replaces the array element at a given index with the int8 value on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_I2">
            <summary>
            <c>stelem.i2</c> - Replaces the array element at a given index with the int16 value on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_I4">
            <summary>
            <c>stelem.i4</c> - Replaces the array element at a given index with the int32 value on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_I8">
            <summary>
            <c>stelem.i8</c> - Replaces the array element at a given index with the int64 value on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, I8 -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_R4">
            <summary>
            <c>stelem.r4</c> - Replaces the array element at a given index with the float32 value on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, R4 -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_R8">
            <summary>
            <c>stelem.r8</c> - Replaces the array element at a given index with the float64 value on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, R8 -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_Ref">
            <summary>
            <c>stelem.ref</c> - Replaces the array element at a given index with the object ref value (type O) on the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, O -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_Any(InlineIL.TypeRef)">
            <summary>
            <c>ldelem.any</c> - Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., value</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldelem_Any``1">
            <summary>
            <c>ldelem.any</c> - Loads the element at a specified array index onto the top of the evaluation stack as the type specified in the instruction.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I -&gt; ..., value</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_Any(InlineIL.TypeRef)">
            <summary>
            <c>stelem.any</c> - Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, O -&gt; ...</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stelem_Any``1">
            <summary>
            <c>stelem.any</c> - Replaces the array element at a given index with the value on the evaluation stack, whose type is specified in the instruction.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O, I, O -&gt; ...</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Unbox_Any(InlineIL.TypeRef)">
            <summary>
            <c>unbox.any</c> - Converts the boxed representation of a type specified in the instruction to its unboxed form.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., value</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Unbox_Any``1">
            <summary>
            <c>unbox.any</c> - Converts the boxed representation of a type specified in the instruction to its unboxed form.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., value</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I1">
            <summary>
            <c>conv.ovf.i1</c> - Converts the signed value on top of the evaluation stack to signed int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U1">
            <summary>
            <c>conv.ovf.u1</c> - Converts the signed value on top of the evaluation stack to unsigned int8 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I2">
            <summary>
            <c>conv.ovf.i2</c> - Converts the signed value on top of the evaluation stack to signed int16 and extending it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U2">
            <summary>
            <c>conv.ovf.u2</c> - Converts the signed value on top of the evaluation stack to unsigned int16 and extends it to int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I4">
            <summary>
            <c>conv.ovf.i4</c> - Converts the signed value on top of the evaluation stack to signed int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U4">
            <summary>
            <c>conv.ovf.u4</c> - Converts the signed value on top of the evaluation stack to unsigned int32, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I8">
            <summary>
            <c>conv.ovf.i8</c> - Converts the signed value on top of the evaluation stack to signed int64, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U8">
            <summary>
            <c>conv.ovf.u8</c> - Converts the signed value on top of the evaluation stack to unsigned int64, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Refanyval(InlineIL.TypeRef)">
            <summary>
            <c>refanyval</c> - Retrieves the address (type &amp;) embedded in a typed reference.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Refanyval``1">
            <summary>
            <c>refanyval</c> - Retrieves the address (type &amp;) embedded in a typed reference.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Ckfinite">
            <summary>
            <c>ckfinite</c> - Throws <see cref="T:System.ArithmeticException" /> if value is not a finite number.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., R8</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Mkrefany(InlineIL.TypeRef)">
            <summary>
            <c>mkrefany</c> - Pushes a typed reference to an instance of a specific type onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., value</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Mkrefany``1">
            <summary>
            <c>mkrefany</c> - Pushes a typed reference to an instance of a specific type onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., value</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldtoken(InlineIL.TypeRef)">
            <summary>
            <c>ldtoken</c> - Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldtoken``1">
            <summary>
            <c>ldtoken</c> - Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldtoken(InlineIL.MethodRef)">
            <summary>
            <c>ldtoken</c> - Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldtoken(InlineIL.FieldRef)">
            <summary>
            <c>ldtoken</c> - Converts a metadata token to its runtime representation, pushing it onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="field">The field reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_U2">
            <summary>
            <c>conv.u2</c> - Converts the value on top of the evaluation stack to unsigned int16, and extends it to int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_U1">
            <summary>
            <c>conv.u1</c> - Converts the value on top of the evaluation stack to unsigned int8, and extends it to int32.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_I">
            <summary>
            <c>conv.i</c> - Converts the value on top of the evaluation stack to native int.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_I">
            <summary>
            <c>conv.ovf.i</c> - Converts the signed value on top of the evaluation stack to signed native int, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_Ovf_U">
            <summary>
            <c>conv.ovf.u</c> - Converts the signed value on top of the evaluation stack to unsigned native int, throwing <see cref="T:System.OverflowException" /> on overflow.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Add_Ovf">
            <summary>
            <c>add.ovf</c> - Adds two integers, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Add_Ovf_Un">
            <summary>
            <c>add.ovf.un</c> - Adds two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Mul_Ovf">
            <summary>
            <c>mul.ovf</c> - Multiplies two integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Mul_Ovf_Un">
            <summary>
            <c>mul.ovf.un</c> - Multiplies two unsigned integer values, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Sub_Ovf">
            <summary>
            <c>sub.ovf</c> - Subtracts one integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Sub_Ovf_Un">
            <summary>
            <c>sub.ovf.un</c> - Subtracts one unsigned integer value from another, performs an overflow check, and pushes the result onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., value</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Endfinally">
            <summary>
            <c>endfinally</c> - Transfers control from the fault or finally clause of an exception block back to the Common Language Infrastructure (CLI) exception handler.
            </summary>
            <remarks>
            <para>Stack Transition: none</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Leave(System.String)">
            <summary>
            <c>leave</c> - Exits a protected region of code, unconditionally transferring control to a specific target instruction.
            </summary>
            <remarks>
            <para>Stack Transition: clears the stack</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Leave_S(System.String)">
            <summary>
            <c>leave.s</c> - Exits a protected region of code, unconditionally transferring control to a target instruction (short form).
            </summary>
            <remarks>
            <para>Stack Transition: clears the stack</para>
            </remarks>
            <param name="labelName">The target label name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stind_I">
            <summary>
            <c>stind.i</c> - Stores a value of type native int at a supplied address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Conv_U">
            <summary>
            <c>conv.u</c> - Converts the value on top of the evaluation stack to unsigned native int, and extends it to native int.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Arglist">
            <summary>
            <c>arglist</c> - Returns an unmanaged pointer to the argument list of the current method.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ceq">
            <summary>
            <c>ceq</c> - Compares two values. If they are equal, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Cgt">
            <summary>
            <c>cgt</c> - Compares two values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Cgt_Un">
            <summary>
            <c>cgt.un</c> - Compares two unsigned or unordered values. If the first value is greater than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Clt">
            <summary>
            <c>clt</c> - Compares two values. If the first value is less than the second, the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Clt_Un">
            <summary>
            <c>clt.un</c> - Compares the unsigned or unordered values value1 and value2. If value1 is less than value2, then the integer value 1 (int32) is pushed onto the evaluation stack; otherwise 0 (int32) is pushed onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value, value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldftn(InlineIL.MethodRef)">
            <summary>
            <c>ldftn</c> - Pushes an unmanaged pointer (type native int) to the native code implementing a specific method onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldvirtftn(InlineIL.MethodRef)">
            <summary>
            <c>ldvirtftn</c> - Pushes an unmanaged pointer (type native int) to the native code implementing a particular virtual method associated with a specified object onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., O -&gt; ..., I</para>
            </remarks>
            <param name="method">The method reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarg(System.String)">
            <summary>
            <c>ldarg</c> - Loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="name">The parameter name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarg(System.UInt16)">
            <summary>
            <c>ldarg</c> - Loads an argument (referenced by a specified index value) onto the stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="index">The argument index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarga(System.String)">
            <summary>
            <c>ldarga</c> - Load an argument address onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="name">The parameter name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldarga(System.UInt16)">
            <summary>
            <c>ldarga</c> - Load an argument address onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="index">The argument index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Starg(System.String)">
            <summary>
            <c>starg</c> - Stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="name">The parameter name.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Starg(System.UInt16)">
            <summary>
            <c>starg</c> - Stores the value on top of the evaluation stack in the argument slot at a specified index.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="index">The argument index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloc(System.String)">
            <summary>
            <c>ldloc</c> - Loads the local variable at a specific index onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="name">The local variable name, declared with <see cref="M:InlineIL.IL.DeclareLocals(InlineIL.LocalVar[])" />.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloc(System.UInt16)">
            <summary>
            <c>ldloc</c> - Loads the local variable at a specific index onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., value</para>
            </remarks>
            <param name="index">The local variable index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloca(System.String)">
            <summary>
            <c>ldloca</c> - Loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="name">The local variable name, declared with <see cref="M:InlineIL.IL.DeclareLocals(InlineIL.LocalVar[])" />.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Ldloca(System.UInt16)">
            <summary>
            <c>ldloca</c> - Loads the address of the local variable at a specific index onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="index">The local variable index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stloc(System.String)">
            <summary>
            <c>stloc</c> - Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="name">The local variable name, declared with <see cref="M:InlineIL.IL.DeclareLocals(InlineIL.LocalVar[])" />.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Stloc(System.UInt16)">
            <summary>
            <c>stloc</c> - Pops the current value from the top of the evaluation stack and stores it in a the local variable list at a specified index.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ...</para>
            </remarks>
            <param name="index">The local variable index.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Localloc">
            <summary>
            <c>localloc</c> - Allocates a certain number of bytes from the local dynamic memory pool and pushes the address (a transient pointer, type *) of the first allocated byte onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Endfilter">
            <summary>
            <c>endfilter</c> - Transfers control from the filter clause of an exception back to the Common Language Infrastructure (CLI) exception handler.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Unaligned(System.Byte)">
            <summary>
            <c>unaligned.</c> - Indicates that an address currently atop the evaluation stack might not be aligned to the natural size of the immediately following ldind, stind, ldfld, stfld, ldobj, stobj, initblk, or cpblk instruction.
            </summary>
            <remarks>
            <para>This is a prefix instruction.</para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Volatile">
            <summary>
            <c>volatile.</c> - Specifies that an address currently atop the evaluation stack might be volatile, and the results of reading that location cannot be cached or that multiple stores to that location cannot be suppressed.
            </summary>
            <remarks>
            <para>This is a prefix instruction.</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Tail">
            <summary>
            <c>tail.</c> - Performs a postfixed method call instruction such that the current method's stack frame is removed before the actual call instruction is executed.
            </summary>
            <remarks>
            <para>This is a prefix instruction.</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Initobj(InlineIL.TypeRef)">
            <summary>
            <c>initobj</c> - Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ...</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Initobj``1">
            <summary>
            <c>initobj</c> - Initializes each field of the value type at a specified address to a null reference or a 0 of the appropriate primitive type.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I -&gt; ...</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Constrained(InlineIL.TypeRef)">
            <summary>
            <c>constrained.</c> - Constrains the type on which a virtual method call is made.
            </summary>
            <remarks>
            <para>This is a prefix instruction.</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Constrained``1">
            <summary>
            <c>constrained.</c> - Constrains the type on which a virtual method call is made.
            </summary>
            <remarks>
            <para>This is a prefix instruction.</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Cpblk">
            <summary>
            <c>cpblk</c> - Copies a specified number bytes from a source address to a destination address.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Initblk">
            <summary>
            <c>initblk</c> - Initializes a specified block of memory at a specific address to a given size and initial value.
            </summary>
            <remarks>
            <para>Stack Transition: ..., I, I, I -&gt; ...</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Rethrow">
            <summary>
            <c>rethrow</c> - Rethrows the current exception.
            </summary>
            <remarks>
            <para>Stack Transition: none</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Sizeof(InlineIL.TypeRef)">
            <summary>
            <c>sizeof</c> - Pushes the size, in bytes, of a supplied value type onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <param name="type">The type reference.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.Sizeof``1">
            <summary>
            <c>sizeof</c> - Pushes the size, in bytes, of a supplied value type onto the evaluation stack.
            </summary>
            <remarks>
            <para>Stack Transition: ... -&gt; ..., I</para>
            </remarks>
            <typeparam name="T">The type reference.</typeparam>
        </member>
        <member name="M:InlineIL.IL.Emit.Refanytype">
            <summary>
            <c>refanytype</c> - Retrieves the type token embedded in a typed reference.
            </summary>
            <remarks>
            <para>Stack Transition: ..., value -&gt; ..., I</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.Readonly">
            <summary>
            <c>readonly.</c> - Specifies that the subsequent array address operation performs no type check at run time, and that it returns a managed pointer whose mutability is restricted.
            </summary>
            <remarks>
            <para>This is a prefix instruction.</para>
            </remarks>
        </member>
        <member name="M:InlineIL.IL.Emit.No(InlineIL.NoArg)">
            <summary>
            <c>no.</c> - Indicates that the subsequent instruction need not perform the specified fault check when it is executed.
            </summary>
            <remarks>
            <para>This is a prefix instruction. Currently not implemented in the CLR.</para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="M:InlineIL.IL.Emit.No(System.Byte)">
            <summary>
            <c>no.</c> - Indicates that the subsequent instruction need not perform the specified fault check when it is executed.
            </summary>
            <remarks>
            <para>This is a prefix instruction. Currently not implemented in the CLR.</para>
            <para>
            The following <paramref name="operand"/> values are defined for the following instructions:
            <list type="table">
            <item>
                <term>0x01: typecheck</term>
                <description><c>castclass</c>, <c>unbox</c>, <c>ldelema</c>, <c>stelem.*</c></description>
            </item>
            <item>
                <term>0x02: rangecheck</term>
                <description><c>ldelem.*</c>, <c>ldelema</c>, <c>stelem.*</c></description>
            </item>
            <item>
                <term>0x04: nullcheck</term>
                <description><c>ldfld</c>, <c>stfld</c>, <c>callvirt</c>, <c>ldvirtftn</c>, <c>ldelem.*</c>, <c>stelem.*</c>, <c>ldelema</c></description>
            </item>
            </list>
            </para>
            </remarks>
            <param name="operand">The operand.</param>
        </member>
        <member name="T:InlineIL.LocalVar">
            <summary>
            Represents a local variable declaration, for use with <see cref="M:InlineIL.IL.DeclareLocals(InlineIL.LocalVar[])" />.
            </summary>
        </member>
        <member name="M:InlineIL.LocalVar.#ctor(System.String,InlineIL.TypeRef)">
            <summary>
            Constructs a named local variable, which can be accessed by name or by index.
            </summary>
            <param name="localName">The local variable name.</param>
            <param name="type">The local variable type.</param>
        </member>
        <member name="M:InlineIL.LocalVar.#ctor(InlineIL.TypeRef)">
            <summary>
            Constructs an anonymous local variable, which can be accessed by index.
            </summary>
            <param name="type">The local variable type.</param>
        </member>
        <member name="M:InlineIL.LocalVar.op_Implicit(System.Type)~InlineIL.LocalVar">
            <summary>
            Converts a <see cref="T:System.Type"/> to a <see cref="T:InlineIL.LocalVar"/>.
            </summary>
            <param name="type">The local variable type.</param>
        </member>
        <member name="M:InlineIL.LocalVar.Pinned">
            <summary>
            Makes the object referred to by the local as pinned in memory, which prevents the garbage collector from moving it.
            </summary>
            <returns>The local variable declaration.</returns>
        </member>
        <member name="T:InlineIL.MethodRef">
            <summary>
            Represents a method reference.
            </summary>
        </member>
        <member name="M:InlineIL.MethodRef.#ctor(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a method reference for a non-overloaded method.
            </summary>
            <param name="type">The type declaring the method.</param>
            <param name="methodName">The method name.</param>
        </member>
        <member name="M:InlineIL.MethodRef.#ctor(InlineIL.TypeRef,System.String,InlineIL.TypeRef[])">
            <summary>
            Constructs a method reference.
            </summary>
            <param name="type">The type declaring the method.</param>
            <param name="methodName">The method name.</param>
            <param name="parameterTypes">The types of the method parameters.</param>
            <remarks>
            Use the <see cref="P:InlineIL.TypeRef.TypeGenericParameters"/> and <see cref="P:InlineIL.TypeRef.MethodGenericParameters"/> static properties
            from the <see cref="T:InlineIL.TypeRef"/> class to represent generic parameter types.
            </remarks>
        </member>
        <member name="M:InlineIL.MethodRef.#ctor(InlineIL.TypeRef,System.String,System.Int32,InlineIL.TypeRef[])">
            <summary>
            Constructs a method reference.
            </summary>
            <param name="type">The type declaring the method.</param>
            <param name="methodName">The method name.</param>
            <param name="genericParameterCount">The generic parameter count. Use 0 for a non-generic method.</param>
            <param name="parameterTypes">The types of the method parameters.</param>
            <remarks>
            Use the <see cref="P:InlineIL.TypeRef.TypeGenericParameters"/> and <see cref="P:InlineIL.TypeRef.MethodGenericParameters"/> static properties
            from the <see cref="T:InlineIL.TypeRef"/> class to represent generic parameter types.
            </remarks>
        </member>
        <member name="M:InlineIL.MethodRef.#ctor(InlineIL.TypeRef,System.String,InlineIL.TypeRef,System.Int32,InlineIL.TypeRef[])">
            <summary>
            Constructs a method reference.
            </summary>
            <param name="type">The type declaring the method.</param>
            <param name="methodName">The method name.</param>
            <param name="returnType">The return type.</param>
            <param name="genericParameterCount">The generic parameter count. Use 0 for a non-generic method.</param>
            <param name="parameterTypes">The types of the method parameters.</param>
            <remarks>
            Use the <see cref="P:InlineIL.TypeRef.TypeGenericParameters"/> and <see cref="P:InlineIL.TypeRef.MethodGenericParameters"/> static properties
            from the <see cref="T:InlineIL.TypeRef"/> class to represent generic parameter types.
            </remarks>
        </member>
        <member name="M:InlineIL.MethodRef.Method(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a method reference for a non-overloaded method.
            </summary>
            <param name="type">The type declaring the method.</param>
            <param name="methodName">The method name.</param>
        </member>
        <member name="M:InlineIL.MethodRef.Method(InlineIL.TypeRef,System.String,InlineIL.TypeRef[])">
            <summary>
            Constructs a method reference.
            </summary>
            <param name="type">The type declaring the method.</param>
            <param name="methodName">The method name.</param>
            <param name="parameterTypes">The types of the method parameters.</param>
            <remarks>
            Use the <see cref="P:InlineIL.TypeRef.TypeGenericParameters"/> and <see cref="P:InlineIL.TypeRef.MethodGenericParameters"/> static properties
            from the <see cref="T:InlineIL.TypeRef"/> class to represent generic parameter types.
            </remarks>
        </member>
        <member name="M:InlineIL.MethodRef.Method(InlineIL.TypeRef,System.String,System.Int32,InlineIL.TypeRef[])">
            <summary>
            Constructs a method reference.
            </summary>
            <param name="type">The type declaring the method.</param>
            <param name="methodName">The method name.</param>
            <param name="genericParameterCount">The generic parameter count. Use 0 for a non-generic method.</param>
            <param name="parameterTypes">The types of the method parameters.</param>
            <remarks>
            Use the <see cref="P:InlineIL.TypeRef.TypeGenericParameters"/> and <see cref="P:InlineIL.TypeRef.MethodGenericParameters"/> static properties
            from the <see cref="T:InlineIL.TypeRef"/> class to represent generic parameter types.
            </remarks>
        </member>
        <member name="M:InlineIL.MethodRef.Method(InlineIL.TypeRef,System.String,InlineIL.TypeRef,System.Int32,InlineIL.TypeRef[])">
            <summary>
            Constructs a method reference.
            </summary>
            <param name="type">The type declaring the method.</param>
            <param name="methodName">The method name.</param>
            <param name="returnType">The return type.</param>
            <param name="genericParameterCount">The generic parameter count. Use 0 for a non-generic method.</param>
            <param name="parameterTypes">The types of the method parameters.</param>
            <remarks>
            Use the <see cref="P:InlineIL.TypeRef.TypeGenericParameters"/> and <see cref="P:InlineIL.TypeRef.MethodGenericParameters"/> static properties
            from the <see cref="T:InlineIL.TypeRef"/> class to represent generic parameter types.
            </remarks>
        </member>
        <member name="M:InlineIL.MethodRef.PropertyGet(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a method reference to a property getter.
            </summary>
            <param name="type">The type declaring the property.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:InlineIL.MethodRef.PropertySet(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a method reference to a property setter.
            </summary>
            <param name="type">The type declaring the property.</param>
            <param name="propertyName">The property name.</param>
        </member>
        <member name="M:InlineIL.MethodRef.EventAdd(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a method reference to the add method of an event.
            </summary>
            <param name="type">The type declaring the event.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:InlineIL.MethodRef.EventRemove(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a method reference to the remove method of an event.
            </summary>
            <param name="type">The type declaring the event.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:InlineIL.MethodRef.EventRaise(InlineIL.TypeRef,System.String)">
            <summary>
            Constructs a method reference to the raise method of an event.
            </summary>
            <param name="type">The type declaring the event.</param>
            <param name="eventName">The event name.</param>
        </member>
        <member name="M:InlineIL.MethodRef.Constructor(InlineIL.TypeRef,InlineIL.TypeRef[])">
            <summary>
            Constructs a method reference to a constructor (<c>.ctor</c> method).
            </summary>
            <param name="type">The type declaring the constructor.</param>
            <param name="parameterTypes">The types of the constructor parameters.</param>
            <remarks>
            Use the <see cref="P:InlineIL.TypeRef.TypeGenericParameters"/> static property
            from the <see cref="T:InlineIL.TypeRef"/> class to represent generic parameter types.
            </remarks>
        </member>
        <member name="M:InlineIL.MethodRef.TypeInitializer(InlineIL.TypeRef)">
            <summary>
            Constructs a method reference to a type initializer (<c>.cctor</c> method).
            </summary>
            <param name="type">The type declaring the constructor.</param>
        </member>
        <member name="M:InlineIL.MethodRef.Operator(InlineIL.TypeRef,InlineIL.UnaryOperator)">
            <summary>
            Constructs a method reference to a unary operator.
            </summary>
            <param name="type">The type declaring the operator.</param>
            <param name="operator">The operator kind.</param>
        </member>
        <member name="M:InlineIL.MethodRef.Operator(InlineIL.TypeRef,InlineIL.BinaryOperator,InlineIL.TypeRef,InlineIL.TypeRef)">
            <summary>
            Constructs a method reference to a binary operator.
            </summary>
            <param name="type">The type declaring the operator.</param>
            <param name="operator">The operator kind.</param>
            <param name="leftType">The left operand type.</param>
            <param name="rightType">The right operand type.</param>
        </member>
        <member name="M:InlineIL.MethodRef.Operator(InlineIL.TypeRef,InlineIL.ConversionOperator,InlineIL.ConversionDirection,InlineIL.TypeRef)">
            <summary>
            Constructs a method reference to a conversion operator.
            </summary>
            <param name="type">The type declaring the operator.</param>
            <param name="operator">The operator kind.</param>
            <param name="direction">The direction of the conversion.</param>
            <param name="otherType">The other type of the conversion.</param>
        </member>
        <member name="M:InlineIL.MethodRef.FromDelegate``1(``0)">
            <summary>
            Constructs a method reference from a delegate.
            </summary>
            <param name="delegate">A delegate which references the method.</param>
            <typeparam name="TDelegate">Type of the delegate.</typeparam>
            <remarks>
            Do not use with lambdas, local functions, or any other compiler-generated methods.
            </remarks>
        </member>
        <member name="M:InlineIL.MethodRef.MakeGenericMethod(InlineIL.TypeRef[])">
            <summary>
            Returns a reference to a constructed generic method, using the supplied generic parameter types.
            </summary>
            <param name="genericParameterTypes">An array of type references to be substituted for the type parameters of the current generic method.</param>
            <returns>A reference to a generic method instance.</returns>
        </member>
        <member name="M:InlineIL.MethodRef.WithOptionalParameters(InlineIL.TypeRef[])">
            <summary>
            Returns a reference to a varargs method instantiation, using the supplied optional parameter types.
            </summary>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>A reference to a varargs method instance.</returns>
        </member>
        <member name="T:InlineIL.NoArg">
            <summary>
            Argument for the <c>no</c> opcode. Multiple values can be OR-ed together.
            </summary>
        </member>
        <member name="F:InlineIL.NoArg.TypeCheck">
            <summary>
            Optionally skip any type checks normally performed as part of the execution of the subsequent instruction.
            </summary>
            <remarks>
            <para><see cref="T:System.InvalidCastException"/> can optionally still be thrown if the check would fail.</para>
            <para>Valid for: <c>castclass</c>, <c>unbox</c>, <c>ldelema</c>, <c>stelem.*</c></para>
            </remarks>
        </member>
        <member name="F:InlineIL.NoArg.RangeCheck">
            <summary>
            Optionally skip any array range checks normally performed as part of the execution of the subsequent instruction.
            </summary>
            <remarks>
            <para><see cref="T:System.IndexOutOfRangeException"/> can optionally still be thrown if the check would fail.</para>
            <para>Valid for: <c>ldelem.*</c>, <c>ldelema</c>, <c>stelem.*</c></para>
            </remarks>
        </member>
        <member name="F:InlineIL.NoArg.NullCheck">
            <summary>
            Optionally skip any null-reference checks normally performed as part of the execution of the subsequent instruction.
            </summary>
            <remarks>
            <para><see cref="T:System.NullReferenceException"/> can optionally still be thrown if the check would fail.</para>
            <para>Valid for: <c>ldfld</c>, <c>stfld</c>, <c>callvirt</c>, <c>ldvirtftn</c>, <c>ldelem.*</c>, <c>stelem.*</c>, <c>ldelema</c></para>
            </remarks>
        </member>
        <member name="T:InlineIL.StandAloneMethodSig">
            <summary>
            Represents a stand-alone method signature,
            for use with <see cref="M:InlineIL.IL.Emit.Calli(InlineIL.StandAloneMethodSig)" />.
            </summary>
        </member>
        <member name="M:InlineIL.StandAloneMethodSig.#ctor(System.Runtime.InteropServices.CallingConvention,InlineIL.TypeRef,InlineIL.TypeRef[])">
            <summary>
            Constructs an unmanaged method signature for the <c>calli</c> opcode.
            </summary>
            <param name="callingConvention">The unmanaged calling convention.</param>
            <param name="returnType">The method return type.</param>
            <param name="parameterTypes">The method parameter types.</param>
        </member>
        <member name="M:InlineIL.StandAloneMethodSig.#ctor(System.Reflection.CallingConventions,InlineIL.TypeRef,InlineIL.TypeRef[])">
            <summary>
            Constructs a managed method signature for the <c>calli</c> opcode.
            </summary>
            <param name="callingConvention">The managed calling convention.</param>
            <param name="returnType">The method return type.</param>
            <param name="parameterTypes">The method parameter types.</param>
        </member>
        <member name="M:InlineIL.StandAloneMethodSig.UnmanagedMethod(System.Runtime.InteropServices.CallingConvention,InlineIL.TypeRef,InlineIL.TypeRef[])">
            <summary>
            Constructs an unmanaged method signature for the <c>calli</c> opcode.
            </summary>
            <param name="callingConvention">The unmanaged calling convention.</param>
            <param name="returnType">The method return type.</param>
            <param name="parameterTypes">The method parameter types.</param>
        </member>
        <member name="M:InlineIL.StandAloneMethodSig.ManagedMethod(System.Reflection.CallingConventions,InlineIL.TypeRef,InlineIL.TypeRef[])">
            <summary>
            Constructs a managed method signature for the <c>calli</c> opcode.
            </summary>
            <param name="callingConvention">The managed calling convention.</param>
            <param name="returnType">The method return type.</param>
            <param name="parameterTypes">The method parameter types.</param>
        </member>
        <member name="M:InlineIL.StandAloneMethodSig.WithOptionalParameters(InlineIL.TypeRef[])">
            <summary>
            Specifies the optional parameter types for a managed varargs method call.
            </summary>
            <param name="optionalParameterTypes">The optional parameter types.</param>
            <returns>A reference to a varargs method call signature.</returns>
        </member>
        <member name="T:InlineIL.TypeRef">
            <summary>
            Represents a type reference.
            </summary>
            <remarks>
            This class is implicitly convertible from <see cref="T:System.Type"/>.
            </remarks>
        </member>
        <member name="P:InlineIL.TypeRef.CoreLibrary">
            <summary>
            Returns the core library name, for use with <see cref="M:InlineIL.TypeRef.#ctor(System.String,System.String)"/>.
            </summary>
        </member>
        <member name="P:InlineIL.TypeRef.TypeGenericParameters">
            <summary>
            Generic parameters of the declaring type, for overload resolution in <see cref="T:InlineIL.MethodRef"/>.
            </summary>
            <remarks>
            Generic parameters of a nested type come after generic parameters of its enclosing type.
            </remarks>
        </member>
        <member name="P:InlineIL.TypeRef.MethodGenericParameters">
            <summary>
            Generic parameters of the method, for overload resolution in <see cref="T:InlineIL.MethodRef"/>.
            </summary>
        </member>
        <member name="M:InlineIL.TypeRef.Type(System.Type)">
            <summary>
            Constructs a type reference from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to reference.</param>
        </member>
        <member name="M:InlineIL.TypeRef.Type``1">
            <summary>
            Constructs a type reference from a <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The type to reference.</typeparam>
        </member>
        <member name="M:InlineIL.TypeRef.#ctor(System.Type)">
            <summary>
            Constructs a type reference from a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type to reference.</param>
        </member>
        <member name="M:InlineIL.TypeRef.#ctor(System.String,System.String)">
            <summary>
            Constructs a type reference.
            </summary>
            <param name="assemblyName">The assembly name containing the type. This assembly should be referenced by the weaved assembly.</param>
            <param name="typeName">The full runtime type name, as returned by <see cref="P:System.Type.FullName"/>.</param>
        </member>
        <member name="M:InlineIL.TypeRef.op_Implicit(System.Type)~InlineIL.TypeRef">
            <summary>
            Converts a <see cref="T:System.Type"/> to a <see cref="T:InlineIL.TypeRef"/>.
            </summary>
            <param name="type">The type to reference.</param>
        </member>
        <member name="M:InlineIL.TypeRef.MakePointerType">
            <summary>
            Returns a type that represents a pointer to the current type.
            </summary>
            <returns>A <see cref="T:InlineIL.TypeRef"/> that represents a pointer to the current type.</returns>
        </member>
        <member name="M:InlineIL.TypeRef.MakeByRefType">
            <summary>
            Returns a type that represents a reference to the current type.
            </summary>
            <returns>A <see cref="T:InlineIL.TypeRef"/> that represents a reference to the current type.</returns>
        </member>
        <member name="M:InlineIL.TypeRef.MakeArrayType">
            <summary>
            Returns a type that represents a one-dimensional array of the current type.
            </summary>
            <returns>A <see cref="T:InlineIL.TypeRef"/> that represents a one-dimensional array of the current type.</returns>
        </member>
        <member name="M:InlineIL.TypeRef.MakeArrayType(System.Int32)">
            <summary>
            Returns a type that represents an array of the current type, with the specified number of dimensions.
            </summary>
            <param name="rank">The number of dimensions for the array.</param>
            <returns>A <see cref="T:InlineIL.TypeRef"/> that represents an array of the current type.</returns>
        </member>
        <member name="M:InlineIL.TypeRef.MakeGenericType(InlineIL.TypeRef[])">
            <summary>
            Returns a type that represents a constructed generic type.
            </summary>
            <param name="typeArguments">An array of type references to be substituted for the type parameters of the current generic type.</param>
            <returns>A <see cref="T:InlineIL.TypeRef"/> that represents a constructed generic type.</returns>
        </member>
        <member name="M:InlineIL.TypeRef.WithOptionalModifier(InlineIL.TypeRef)">
            <summary>
            Returns a type with an applied custom optional modifier (<c>modopt</c>).
            </summary>
            <param name="modifierType">The custom modifier type.</param>
            <returns>A <see cref="T:InlineIL.TypeRef"/> with the custom modifier applied.</returns>
        </member>
        <member name="M:InlineIL.TypeRef.WithRequiredModifier(InlineIL.TypeRef)">
            <summary>
            Returns a type with an applied custom required modifier (<c>modreq</c>).
            </summary>
            <param name="modifierType">The custom modifier type.</param>
            <returns>A <see cref="T:InlineIL.TypeRef"/> with the custom modifier applied.</returns>
        </member>
        <member name="T:InlineIL.UnaryOperator">
            <summary>
            Unary operator.
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.Decrement">
            <summary>
            <c>op_Decrement</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.Increment">
            <summary>
            <c>op_Increment</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.UnaryNegation">
            <summary>
            <c>op_UnaryNegation</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.UnaryPlus">
            <summary>
            <c>op_UnaryPlus</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.LogicalNot">
            <summary>
            <c>op_LogicalNot</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.True">
            <summary>
            <c>op_True</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.False">
            <summary>
            <c>op_False</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.AddressOf">
            <summary>
            <c>op_AddressOf</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.OnesComplement">
            <summary>
            <c>op_OnesComplement</c>
            </summary>
        </member>
        <member name="F:InlineIL.UnaryOperator.PointerDereference">
            <summary>
            <c>op_PointerDereference</c>
            </summary>
        </member>
    </members>
</doc>
