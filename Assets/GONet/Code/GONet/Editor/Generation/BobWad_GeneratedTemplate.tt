<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)Library\ScriptAssemblies\Assembly-CSharp.dll" #>
<#@ assembly name="$(ProjectDir)Library\ScriptAssemblies\Assembly-CSharp-Editor.dll" #>

<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="GONet" #>
<#@ import namespace="GONet.Utils" #>
<#@ import namespace="GONet.Generation" #>

/* Copyright (C) Shaun Curtis Sheppard - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential
 * Written by Shaun Sheppard <shasheppard@gmail.com>, June 2019
 *
 * Authorized use is explicitly limited to the following:	
 * -The ability to view and reference source code without changing it
 * -The ability to enhance debugging with source code access
 * -The ability to distribute products based on original sources for non-commercial purposes, whereas this license must be included if source code provided in said products
 * -The ability to commercialize products built on original source code, whereas this license must be included if source code provided in said products
 * -The ability to modify source code for local use only
 * -The ability to distribute products based on modified sources for non-commercial purposes, whereas this license must be included if source code provided in said products
 * -The ability to commercialize products built on modified source code, whereas this license must be included if source code provided in said products
 */

using System;
using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;
using GONet;

namespace GONet
{

<#
	int iPersistentEvents = 0;
	foreach (var types in AppDomain.CurrentDomain.GetAssemblies().OrderBy(a => a.FullName)
				.Select(a => a.GetTypes().Where(t => TypeUtils.IsTypeAInstanceOfTypeB(t, typeof(IGONetEvent)) && !t.IsAbstract).OrderBy(t2 => t2.FullName)))
    {
        foreach (var type in types)
        {
	#>
	[MessagePack.Union(<#=(++iPersistentEvents - 1).ToString()#>, typeof(<#=type.FullName#>))]
	<#
        }
    }
#>	public partial interface IGONetEvent { }


<#
	iPersistentEvents = 0;
	foreach (var types in AppDomain.CurrentDomain.GetAssemblies().OrderBy(a => a.FullName)
				.Select(a => a.GetTypes().Where(t => TypeUtils.IsTypeAInstanceOfTypeB(t, typeof(ITransientEvent)) && !t.IsAbstract).OrderBy(t2 => t2.FullName)))
    {
        foreach (var type in types)
        {
	#>
	[MessagePack.Union(<#=(++iPersistentEvents - 1).ToString()#>, typeof(<#=type.FullName#>))]
	<#
        }
    }
#>	public partial interface ITransientEvent : IGONetEvent { }


<#
	iPersistentEvents = 0;
	foreach (var types in AppDomain.CurrentDomain.GetAssemblies().OrderBy(a => a.FullName)
				.Select(a => a.GetTypes().Where(t => TypeUtils.IsTypeAInstanceOfTypeB(t, typeof(IPersistentEvent)) && !t.IsAbstract).OrderBy(t2 => t2.FullName)))
    {
        foreach (var type in types)
        {
	#>
	[MessagePack.Union(<#=(++iPersistentEvents - 1).ToString()#>, typeof(<#=type.FullName#>))]
	<#
        }
    }
#>	public partial interface IPersistentEvent : IGONetEvent { }

<#
	foreach (var typeKVP in uniqueCombos)
    {
		foreach (var memberKVP in typeKVP.Value)
        {
			const string UNDIE = "_";
			const string PER = ".";
			const string SYNC_EV = "_SyncEvent";
			string shortType = typeKVP.Key.Contains(PER) ? typeKVP.Key.Substring(typeKVP.Key.LastIndexOf(PER) + 1) : typeKVP.Key;
			string className = string.Concat(shortType, UNDIE, memberKVP.Key, SYNC_EV);
#>
    [MessagePack.MessagePackObject]
    public class <#=className#> : SyncValueChangeProcessedEvent
    {
		[MessagePack.Key(7)]
		public <#=memberKVP.Value#> valuePrevious2;
        
		[MessagePack.Key(8)]
        public <#=memberKVP.Value#> valueNew2;

		public <#=className#>(SyncValueChangeProcessedEvent.ProcessedExplanation explanation, long occurredAtElapsedTicks, uint relatedOwnerAuthorityId, uint gonetId, byte index, <#=memberKVP.Value#> valuePrevious, <#=memberKVP.Value#> valueNew)
			: base(explanation, occurredAtElapsedTicks, relatedOwnerAuthorityId, gonetId, index, valuePrevious, valueNew)
		{
			this.valuePrevious2 = valuePrevious;
			this.valueNew2 = valueNew;
		}
    }

<#
        }
    }
#>
}

namespace GONet.Generation
{
	public partial class BobWad
	{
		static BobWad()
		{
			GONetParticipant_AutoMagicalSyncCompanion_Generated_Factory.theRealness = hahaThisIsTrulyTheRealness;
			GONet_SyncValueChangeProcessedEvent_Generated_Factory.theRealness = hahaThisIsTrulyTheRealness_Events;
		}

		static internal GONetParticipant_AutoMagicalSyncCompanion_Generated hahaThisIsTrulyTheRealness(GONetParticipant gonetParticipant)
		{
			switch (gonetParticipant.codeGenerationId)
			{
<#
	for (int iCodeGenerationId = 1; iCodeGenerationId <= (int)maxCodeGenerationId; ++iCodeGenerationId)
    {
#>
				case <#=iCodeGenerationId#>:
					return new GONetParticipant_AutoMagicalSyncCompanion_Generated_<#=iCodeGenerationId#>(gonetParticipant);
<#	}#>
			}

			return null;
		}

		internal static SyncValueChangeProcessedEvent hahaThisIsTrulyTheRealness_Events(SyncValueChangeProcessedEvent.ProcessedExplanation explanation, long elapsedTicks, uint filterUsingOwnerAuthorityId, GONetParticipant_AutoMagicalSyncCompanion_Generated syncCompanion, byte syncMemberIndex)
        {
            switch (syncCompanion.gonetParticipant.codeGenerationId)
            {
<#
	for (byte iCodeGenerationId = 1; iCodeGenerationId <= maxCodeGenerationId; ++iCodeGenerationId)
    {
#>
				case <#=iCodeGenerationId#>:
					{
						GONetParticipant_AutoMagicalSyncCompanion_Generated_<#=iCodeGenerationId#> companion = (GONetParticipant_AutoMagicalSyncCompanion_Generated_<#=iCodeGenerationId#>)syncCompanion;
                        switch (syncMemberIndex)
                        {

<#
							int iOverall = 0;
							foreach (var uniqueSnap in allUniqueSnapsByCodeGenerationId[iCodeGenerationId])
                            {
								foreach (var single in uniqueSnap.autoSyncMembers)
                                {
#>
                            case <#=iOverall#>:
								{
									var valueNew = companion.<#=uniqueSnap.componentTypeName#>.<#=single.memberName#>;
									return new <#=uniqueSnap.componentTypeName#>_<#=single.memberName#>_SyncEvent(explanation, elapsedTicks, filterUsingOwnerAuthorityId, syncCompanion.gonetParticipant.GONetId, syncMemberIndex, (<#=single.memberTypeFullName#>)companion.valuesChangesSupport[syncMemberIndex].lastKnownValue, valueNew);
								}
<#
									++iOverall;
								}
                            }
#>
						
						}
					}
					break;

<#	}#>
            }

            return default;
        }
	}
}