﻿<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ assembly name="System.Core" #>
<#@ assembly name="$(ProjectDir)Library\ScriptAssemblies\Assembly-CSharp.dll" #>
<#@ assembly name="$(ProjectDir)Library\ScriptAssemblies\Assembly-CSharp-Editor.dll" #>

<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="GONet" #>
<#@ import namespace="GONet.Utils" #>
<#@ import namespace="GONet.Generation" #>

/* GONet (TM, serial number 88592370), Copyright (c) 2019-2023 Galore Interactive LLC - All Rights Reserved
 * Unauthorized copying of this file, via any medium is strictly prohibited
 * Proprietary and confidential, email: contactus@galoreinteractive.com
 * 
 *
 * Authorized use is explicitly limited to the following:	
 * -The ability to view and reference source code without changing it
 * -The ability to enhance debugging with source code access
 * -The ability to distribute products based on original sources for non-commercial purposes, whereas this license must be included if source code provided in said products
 * -The ability to commercialize products built on original source code, whereas this license must be included if source code provided in said products and whereas the products are interactive multi-player video games and cannot be viewed as a product competitive to GONet
 * -The ability to modify source code for local use only
 * -The ability to distribute products based on modified sources for non-commercial purposes, whereas this license must be included if source code provided in said products
 * -The ability to commercialize products built on modified source code, whereas this license must be included if source code provided in said products and whereas the products are interactive multi-player video games and cannot be viewed as a product competitive to GONet
 */

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;
using GONet;

namespace GONet
{

<#
	HashSet<string> syncEventTypeFullNames = new HashSet<string>();
	HashSet<string> syncEventNames = new HashSet<string>();
	foreach (var typeKVP in uniqueCombos)
    {
		foreach (var memberKVP in typeKVP.Value)
        {
			{ // FIY, this block is mostly coppi pasta from below:!!:
		        const string UNDIE = "_";
		        const string PER = ".";
		        const string SYNC_EV = "SyncEvent_";
		        ValueTuple<string, AnimatorControllerParameterGenerationInfo> memberTuple = memberKVP.Value;
		        string shortComponentType = typeKVP.Key.Contains(PER) ? typeKVP.Key.Substring(typeKVP.Key.LastIndexOf(PER) + 1) : typeKVP.Key;
                string className = string.Concat(SYNC_EV, shortComponentType, UNDIE, memberKVP.Key);
                if (!syncEventNames.Contains(className))
                {
                    syncEventNames.Add(className);
                }
                else
                {
                    className = string.Concat(SYNC_EV, typeKVP.Key.Replace(PER, UNDIE), UNDIE, memberKVP.Key);
                }
            
                syncEventNames.Add(className);
		        syncEventTypeFullNames.Add(string.Concat("GONet.", className)); // except this, this is not coppi pasta
            }
        }
    }
    syncEventNames.Clear();

	HashSet<string> tmpTypeFullNames = new HashSet<string>(syncEventTypeFullNames);
	foreach (var types in AppDomain.CurrentDomain.GetAssemblies().OrderBy(a => a.FullName)
				.Select(a => a.GetLoadableTypes().Where(t => TypeUtils.IsTypeAInstanceOfTypeB(t, typeof(IGONetEvent)) && !t.IsAbstract).OrderBy(t2 => t2.FullName)))
    {
        foreach (var type in types)
        {
			tmpTypeFullNames.Add(type.FullName);
        }
    }

	List<string> tmpTypeFullNames_ALL = new List<string>(tmpTypeFullNames);
	int iPersistentEvents = 0;
	foreach (string tmpTypeFullName in tmpTypeFullNames.OrderBy(x => x))
    {
	#>
	[MemoryPack.MemoryPackUnion(<#=(++iPersistentEvents - 1).ToString()#>, typeof(<#=tmpTypeFullName#>))]
	<#
    }
#>	[MemoryPack.MemoryPackable] public partial interface IGONetEvent { }


<#
	tmpTypeFullNames = new HashSet<string>(syncEventTypeFullNames);
	foreach (var types in AppDomain.CurrentDomain.GetAssemblies().OrderBy(a => a.FullName)
				.Select(a => a.GetLoadableTypes().Where(t => TypeUtils.IsTypeAInstanceOfTypeB(t, typeof(ITransientEvent)) && !t.IsAbstract).OrderBy(t2 => t2.FullName)))
    {
        foreach (var type in types)
        {
			tmpTypeFullNames.Add(type.FullName);
        }
    }

	iPersistentEvents = 0;
	foreach (string tmpTypeFullName in tmpTypeFullNames.OrderBy(x => x))
    {
	#>
	[MemoryPack.MemoryPackUnion(<#=(++iPersistentEvents - 1).ToString()#>, typeof(<#=tmpTypeFullName#>))]
	<#
    }
#>	[MemoryPack.MemoryPackable] public partial interface ITransientEvent : IGONetEvent { }


<#
	tmpTypeFullNames = new HashSet<string>();
	foreach (var types in AppDomain.CurrentDomain.GetAssemblies().OrderBy(a => a.FullName)
				.Select(a => a.GetLoadableTypes().Where(t => TypeUtils.IsTypeAInstanceOfTypeB(t, typeof(IPersistentEvent)) && !t.IsAbstract).OrderBy(t2 => t2.FullName)))
    {
        foreach (var type in types)
        {
			tmpTypeFullNames.Add(type.FullName);
        }
    }

	iPersistentEvents = 0;
	foreach (string tmpTypeFullName in tmpTypeFullNames.OrderBy(x => x))
    {
	#>
	[MemoryPack.MemoryPackUnion(<#=(++iPersistentEvents - 1).ToString()#>, typeof(<#=tmpTypeFullName#>))]
	<#
    }
#>	[MemoryPack.MemoryPackable] public partial interface IPersistentEvent : IGONetEvent { }

	<#
	iPersistentEvents = 0;
	foreach (string syncEventTypeFullName in syncEventTypeFullNames.OrderBy(x => x))
    {
	#>
	[MemoryPack.MemoryPackUnion(<#=(++iPersistentEvents - 1).ToString()#>, typeof(<#=syncEventTypeFullName#>))]
	<#
    }
#>	public abstract partial class SyncEvent_ValueChangeProcessed { }

	public enum SyncEvent_GeneratedTypes
	{
		<#
		foreach (var keyValuePair in syncEventGeneratedTypesMap)
        {
            const string SYNC_EV = "SyncEvent_";
            const string SPACE = " ";
            const string UNDIE = "_";
            string tmp = keyValuePair.Value.Substring(keyValuePair.Value.LastIndexOf(SPACE) + 1);
            if (syncEventNames.Contains(tmp))
            {
                tmp = SYNC_EV + tmp.Replace(SPACE, UNDIE);
            }
            else
            {
                tmp = SYNC_EV + tmp;
            }
		#>
				<#=tmp#> = <#=keyValuePair.Key#>,
		<#
        syncEventNames.Clear();
        }
		#>
	}

<#
	foreach (var typeKVP in uniqueCombos)
    {
		foreach (var memberKVP in typeKVP.Value)
        {
			const string UNDIE = "_";
		    const string PER = ".";
		    const string SYNC_EV = "SyncEvent_";
		    ValueTuple<string, AnimatorControllerParameterGenerationInfo> memberTuple = memberKVP.Value;
		    string shortComponentType = typeKVP.Key.Contains(PER) ? typeKVP.Key.Substring(typeKVP.Key.LastIndexOf(PER) + 1) : typeKVP.Key;
            string className = string.Concat(SYNC_EV, shortComponentType, UNDIE, memberKVP.Key);
            if (!syncEventNames.Contains(className))
            {
                syncEventNames.Add(className);
            }
            else
            {
                className = string.Concat(SYNC_EV, typeKVP.Key.Replace(PER, UNDIE), UNDIE, memberKVP.Key);
            }
#>
    
	
    /// <summary>
    /// <para>This represents that a sync value change has been processed.  Use the class name to determine the related value/type/context.</para>
	/// <para>Two major occassions this event will occur (use this.<see cref="SyncEvent_ValueChangeProcessed.Explanation"/> to know which of the two occasions this represents):</para>
    /// <para>1) For an outbound change being sent to remote recipients (in which case, this event is published just AFTER the change has been sent to remote sources; however, the remote recipients likely have NOT received/processed it yet.)</para>
    /// <para>2) For an inbound change received from a remote source (in which case, this event is published just AFTER the change has been applied)</para>
    /// </summary>
    [MemoryPack.MemoryPackable]
    public partial sealed class <#=className#> : SyncEvent_ValueChangeProcessed
    {
		public <#=memberKVP.Value.Item1#> valuePrevious;
		public <#=memberKVP.Value.Item1#> valueNew;

		[MemoryPack.MemoryPackIgnore] public override GONetSyncableValue ValuePrevious => valuePrevious;
        [MemoryPack.MemoryPackIgnore] public override GONetSyncableValue ValueNew => valueNew;
		[MemoryPack.MemoryPackIgnore] public override GONet.SyncEvent_GeneratedTypes SyncEvent_GeneratedType => SyncEvent_GeneratedTypes.<#=syncEventGeneratedTypeName#>;

        static readonly Utils.ObjectPool<<#=className#>> pool = new Utils.ObjectPool<<#=className#>>(GONetMain.SYNC_EVENT_QUEUE_SAVE_WHEN_FULL_SIZE + 50, 1);
        static readonly System.Collections.Concurrent.ConcurrentQueue<<#=className#>> returnQueue_onceOnBorrowThread = new System.Collections.Concurrent.ConcurrentQueue<<#=className#>>();
        static System.Threading.Thread borrowThread;

        /// <summary>
        /// Do NOT use!  This is for object pooling and MemoryPack only.
        /// Instead, call <see cref="Borrow(SyncEvent_ValueChangeProcessedExplanation, long, uint, uint, byte, <#=memberKVP.Value.Item1#>, <#=memberKVP.Value.Item1#>)"/>.
        /// </summary>
        public <#=className#>() { }

        /// <summary>
        /// IMPORTANT: It is the caller's responsibility to ensure the instance returned from this method is also returned back
        ///            here (i.e., to private object pool) via <see cref="Return(<#=className#>)"/> when no longer needed!
        /// </summary>
        public static <#=className#> Borrow(SyncEvent_ValueChangeProcessedExplanation explanation, long occurredAtElapsedTicks, ushort relatedOwnerAuthorityId, uint gonetId, byte codeGenerationId, byte syncMemberIndex, <#=memberKVP.Value.Item1#> valuePrevious, <#=memberKVP.Value.Item1#> valueNew)
		{
            if (borrowThread == null)
            {
                borrowThread = System.Threading.Thread.CurrentThread;
            }
            else if (borrowThread != System.Threading.Thread.CurrentThread)
            {
                const string REQUIRED_CALL_SAME_BORROW_THREAD = "Not allowed to call this from more than one thread.  So, ensure Borrow() is called from the same exact thread for this specific event type.  NOTE: Each event type can have its' Borrow() called from a different thread from one another.";
                throw new InvalidOperationException(REQUIRED_CALL_SAME_BORROW_THREAD);
            }

            int autoReturnCount = returnQueue_onceOnBorrowThread.Count;
            <#=className#> autoReturn;
            while (returnQueue_onceOnBorrowThread.TryDequeue(out autoReturn) && autoReturnCount > 0)
            {
                Return(autoReturn);
                ++autoReturnCount;
            }

            var @event = pool.Borrow();
            
            @event.Explanation = explanation;
            @event.OccurredAtElapsedTicks = occurredAtElapsedTicks;
            @event.RelatedOwnerAuthorityId = relatedOwnerAuthorityId;
            @event.GONetId = gonetId;
			@event.CodeGenerationId = codeGenerationId;
            @event.SyncMemberIndex = syncMemberIndex;
			@event.valuePrevious = valuePrevious;
            @event.valueNew = valueNew;

            return @event;
		}

        public override void Return()
		{
			Return(this);
		}

        public static void Return(<#=className#> borrowed)
        {
            if (borrowThread == System.Threading.Thread.CurrentThread)
            {
                pool.Return(borrowed);
            }
            else
            {
                returnQueue_onceOnBorrowThread.Enqueue(borrowed);
            }
        }
    }

<#
        }
    }
	syncEventNames.Clear();
#>
}

namespace GONet.Generation
{
	public partial class BobWad
	{
		static BobWad()
		{
			GONetParticipant_AutoMagicalSyncCompanion_Generated_Factory.theRealness = hahaThisIsTrulyTheRealness;
			GONetParticipant_AutoMagicalSyncCompanion_Generated_Factory.theRealness_quantizerSettings = hahaThisIsTrulyTheRealness_quantizerSettings;

			GONet_SyncEvent_ValueChangeProcessed_Generated_Factory.theRealness = hahaThisIsTrulyTheRealness_Events;
			GONet_SyncEvent_ValueChangeProcessed_Generated_Factory.theRealness_copy = hahaThisIsTrulyTheRealness_Events_Copy;

			GONet_SyncEvent_ValueChangeProcessed_Generated_Factory.allUniqueSyncEventTypes = new List<Type>()
			{
<#
		foreach (string syncEventTypeFullName in tmpTypeFullNames_ALL.OrderBy(x => x))
        {
#>
				typeof(<#=syncEventTypeFullName#>),
<#
        }
#>
				typeof(GONet.SyncEvent_Time_ElapsedTicks_SetFromAuthority),
			};
		}

		static internal HashSet<GONet.Utils.QuantizerSettingsGroup> hahaThisIsTrulyTheRealness_quantizerSettings()
		{
			HashSet<GONet.Utils.QuantizerSettingsGroup> settings = new HashSet<GONet.Utils.QuantizerSettingsGroup>();

<#
	foreach (var uniqueEntry in allUniqueSnapsForPersistence)
    {
		int singleCount = uniqueEntry.ComponentMemberNames_By_ComponentTypeFullName.Length;
		for (int iSingle = 0; iSingle < singleCount; ++iSingle)
		{
			GONetParticipant_ComponentsWithAutoSyncMembers_Single single = uniqueEntry.ComponentMemberNames_By_ComponentTypeFullName[iSingle];
			int singleMemberCount = single.autoSyncMembers.Length;
			for (int iSingleMember = 0; iSingleMember < singleMemberCount; ++iSingleMember)
			{
				GONetParticipant_ComponentsWithAutoSyncMembers_SingleMember singleMember = single.autoSyncMembers[iSingleMember];
#>
			var item_codeGenerationId<#=uniqueEntry.codeGenerationId#>_single<#=iSingle#>_singleMember<#=iSingleMember#> = new GONet.Utils.QuantizerSettingsGroup(<#=singleMember.attribute.QuantizeLowerBound == float.MinValue ? "float.MinValue" : singleMember.attribute.QuantizeLowerBound.ToString(CultureInfo.InvariantCulture) + "f"#>, <#=singleMember.attribute.QuantizeUpperBound == float.MaxValue ? "float.MaxValue" : singleMember.attribute.QuantizeUpperBound.ToString(CultureInfo.InvariantCulture) + "f"#>, <#=singleMember.attribute.QuantizeDownToBitCount#>, true);
			settings.Add(item_codeGenerationId<#=uniqueEntry.codeGenerationId#>_single<#=iSingle#>_singleMember<#=iSingleMember#>);

<#
	        }
		}
    }
#>
			return settings;
		}

		static internal GONetParticipant_AutoMagicalSyncCompanion_Generated hahaThisIsTrulyTheRealness(GONetParticipant gonetParticipant)
		{
			switch (gonetParticipant.codeGenerationId)
			{
<#
	for (int i = 0; i < usedCodegenIds.Length; ++i)
	{
		byte iCodeGenerationId = usedCodegenIds[i];
#>
				case <#=iCodeGenerationId#>:
					return new GONetParticipant_AutoMagicalSyncCompanion_Generated_<#=iCodeGenerationId#>(gonetParticipant);
<#	}#>
			}

			return null;
		}

		internal static SyncEvent_ValueChangeProcessed hahaThisIsTrulyTheRealness_Events(SyncEvent_ValueChangeProcessedExplanation explanation, long elapsedTicks, ushort filterUsingOwnerAuthorityId, GONetParticipant_AutoMagicalSyncCompanion_Generated syncCompanion, byte syncMemberIndex)
        {
            switch (syncCompanion.gonetParticipant.codeGenerationId)
            {
<#
	for (int i = 0; i < usedCodegenIds.Length; ++i)
	{
		byte iCodeGenerationId = usedCodegenIds[i];
#>
				case <#=iCodeGenerationId#>:
					{
						GONetParticipant_AutoMagicalSyncCompanion_Generated_<#=iCodeGenerationId#> companion = (GONetParticipant_AutoMagicalSyncCompanion_Generated_<#=iCodeGenerationId#>)syncCompanion;
                        switch (syncMemberIndex)
                        {

<#
							int iOverall = 0;
							foreach (var uniqueSnap in allUniqueSnapsByCodeGenerationId[iCodeGenerationId])
                            {
								foreach (var singleMember in uniqueSnap.autoSyncMembers)
                                {
									string memberTypeFullName = singleMember.animatorControllerParameterId == 0 ? singleMember.memberTypeFullName : singleMember.animatorControllerParameterTypeFullName;
#>
                            case <#=iOverall#>:
								{
									<#=memberTypeFullName#> valueNew;
									GONetSyncableValue valueNew_mostRecentChangeAtTime;
									if (explanation == SyncEvent_ValueChangeProcessedExplanation.InboundFromOther && companion.valuesChangesSupport[syncMemberIndex].TryGetMostRecentChangeAtTime(elapsedTicks, out valueNew_mostRecentChangeAtTime))
									{
										valueNew = valueNew_mostRecentChangeAtTime.<#=memberTypeFullName.Replace(".", "_")#>;
									}
									else
									{
									<# if (singleMember.animatorControllerParameterId == 0) { #>
										valueNew = companion.<#=uniqueSnap.componentTypeName#>.<#=singleMember.memberName#>;
									<# } else { #>
										valueNew = companion.<#=uniqueSnap.componentTypeName#>.Get<#=singleMember.animatorControllerParameterMethodSuffix#>(<#=singleMember.animatorControllerParameterId.ToString()#>);
									<# } #>
									}
<#
									const string SYNC_EV = "SyncEvent_";
									const string UNDIE = "_";
									const string PER = ".";

									string className = SYNC_EV;
									if (singleMember.animatorControllerParameterId == 0)
                                    {
										className += string.Concat(uniqueSnap.componentTypeName, UNDIE, singleMember.memberName);

										if (!syncEventNames.Contains(className))
                                        {
                                            syncEventNames.Add(className);
                                        }
                                        else
                                        {
                                            className = string.Concat(SYNC_EV, uniqueSnap.componentTypeFullName.Replace(PER, UNDIE), UNDIE, singleMember.memberName);
                                        }
                                    }
									else
									{
										const string PARAM = "parameters_";
										className += string.Concat(typeof(UnityEngine.Animator).Name, singleMember.animatorControllerName, UNDIE, PARAM, singleMember.animatorControllerParameterName);
									}
#>									<#=memberTypeFullName#> valuePrevious = explanation == SyncEvent_ValueChangeProcessedExplanation.OutboundToOthers ? companion.valuesChangesSupport[syncMemberIndex].lastKnownValue_previous.<#=memberTypeFullName.Replace(".", "_")#> : companion.valuesChangesSupport[syncMemberIndex].lastKnownValue.<#=memberTypeFullName.Replace(".", "_")#>; // because of order of operations and state of affairs at the time of publishing this event being different for the in/out direction, there is a different value to pull from that represents the previous value
									return <#=className#>.Borrow(explanation, elapsedTicks, filterUsingOwnerAuthorityId, syncCompanion.gonetParticipant.GONetId, <#=iCodeGenerationId#>, syncMemberIndex, valuePrevious, valueNew);
								}
<#
									++iOverall;
								}
                            }
#>
						
						}
					}
					break;

<#	}#>
            }

            return default;
        }

		internal static SyncEvent_ValueChangeProcessed hahaThisIsTrulyTheRealness_Events_Copy(SyncEvent_ValueChangeProcessed original)
		{
            switch (original.CodeGenerationId)
            {
<#
	for (int i = 0; i < usedCodegenIds.Length; ++i)
	{
		byte iCodeGenerationId = usedCodegenIds[i];
#>
				case <#=iCodeGenerationId#>:
					{
                        switch (original.SyncMemberIndex)
                        {

<#
							int iOverall = 0;
							foreach (var uniqueSnap in allUniqueSnapsByCodeGenerationId[iCodeGenerationId])
                            {
								foreach (var singleMember in uniqueSnap.autoSyncMembers)
                                {
									string memberTypeFullName = singleMember.animatorControllerParameterId == 0 ? singleMember.memberTypeFullName : singleMember.animatorControllerParameterTypeFullName;
#>
                            case <#=iOverall#>:
								{
<#
									const string SYNC_EV = "SyncEvent_";
									const string UNDIE = "_";
									const string PER = ".";

									string className = SYNC_EV;
									if (singleMember.animatorControllerParameterId == 0)
                                    {
										className += string.Concat(uniqueSnap.componentTypeName, UNDIE, singleMember.memberName);

										if (!syncEventNames.Contains(className))
                                        {
                                            syncEventNames.Add(className);
                                        }
                                        else
                                        {
                                            className = string.Concat(SYNC_EV, uniqueSnap.componentTypeFullName.Replace(PER, UNDIE), UNDIE, singleMember.memberName);
                                        }
                                    }
									else
									{
										const string PARAM = "parameters_";
										className += string.Concat(typeof(UnityEngine.Animator).Name, singleMember.animatorControllerName, UNDIE, PARAM, singleMember.animatorControllerParameterName);
									}
#>									<#=className#> originalTyped = (<#=className#>)original;
									return <#=className#>.Borrow(original.Explanation, original.OccurredAtElapsedTicks, original.RelatedOwnerAuthorityId, original.GONetId, original.CodeGenerationId, original.SyncMemberIndex, originalTyped.valuePrevious, originalTyped.valueNew);
								}
<#
									++iOverall;
								}
                            }
#>
						
						}
					}
					break;

<#	}#>
			}

			return default;
		}
	}
}