// GENERATED BY GONet - DO NOT EDIT
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using GONet;
using GONet.Utils;
using MemoryPack;

namespace GONet
{
    internal static class CircularMotion_RpcIds
    {
        // Base class RPC IDs
        internal const uint GetFullRpcValidationReport_RpcId = 0xBCF6ED9A;
    }

    internal static class CircularMotion_RpcInitializer
    {
        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
        private static void Initialize()
        {
            CircularMotion_RpcDispatcher.EnsureInitialized();
        }
    }

    internal class CircularMotion_RpcDispatcher : IRpcDispatcher
    {
        private static bool isInitialized = false;


        // Property accessor delegates for single targets
        private static readonly Dictionary<string, Func<object, ushort>> TargetPropertyAccessors = 
            new Dictionary<string, Func<object, ushort>>
        {
        };

        // Property accessor delegates for multiple targets (fills buffer, returns count)
        private static readonly Dictionary<string, Func<object, ushort[], int>> MultiTargetPropertyAccessors = 
            new Dictionary<string, Func<object, ushort[], int>>
        {
        };

        // Parameter count metadata for validators
        private static readonly Dictionary<string, int> ValidatorParameterCounts = 
            new Dictionary<string, int>
        {
        };

        // Validation delegates that return full validation results with parameter-specific signatures
        private static readonly Dictionary<string, object> EnhancedValidators = 
            new Dictionary<string, object>
        {
        };

        public static readonly Dictionary<string, RpcMetadata> Metadata = new Dictionary<string, RpcMetadata>
        {
            // Base class RPCs
            { nameof(GONetParticipantCompanionBehaviour.GetFullRpcValidationReport), new RpcMetadata { 
                Type = RpcType.ServerRpc, 
                IsReliable = true, 
                IsMineRequired = true, 
                IsPersistent = false, 
                Target = RpcTarget.All, 
                TargetPropertyName = null,
                IsMultipleTargets = false,
                ValidationMethodName = null,
                ExpectsDeliveryReport = false
            }},
        };

        public void Dispatch0(object instance, string methodName)
        {
        }

        public void Dispatch1<T1>(object instance, string methodName, T1 arg1)
        {
        }

        public void Dispatch2<T1, T2>(object instance, string methodName, T1 arg1, T2 arg2)
        {
        }

        public void Dispatch3<T1, T2, T3>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3)
        {
        }

        public void Dispatch4<T1, T2, T3, T4>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
        }

        public void Dispatch5<T1, T2, T3, T4, T5>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
        }

        public void Dispatch6<T1, T2, T3, T4, T5, T6>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
        }

        public void Dispatch7<T1, T2, T3, T4, T5, T6, T7>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
        }

        public void Dispatch8<T1, T2, T3, T4, T5, T6, T7, T8>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
        }

        public async Task<TResult> DispatchAsync0<TResult>(object instance, string methodName)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync1<TResult, T1>(object instance, string methodName, T1 arg1)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync2<TResult, T1, T2>(object instance, string methodName, T1 arg1, T2 arg2)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync3<TResult, T1, T2, T3>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync4<TResult, T1, T2, T3, T4>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync5<TResult, T1, T2, T3, T4, T5>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync6<TResult, T1, T2, T3, T4, T5, T6>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync7<TResult, T1, T2, T3, T4, T5, T6, T7>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync8<TResult, T1, T2, T3, T4, T5, T6, T7, T8>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
            return default(TResult);
        }


        static CircularMotion_RpcDispatcher()
        {
            if (!isInitialized)
            {
                isInitialized = true;
                GONetMain.EventBus.RegisterRpcIdMapping(0xBCF6ED9A, nameof(GONetParticipantCompanionBehaviour.GetFullRpcValidationReport), typeof(CircularMotion));
                GONetMain.EventBus.RegisterRpcDispatcher(typeof(CircularMotion), new CircularMotion_RpcDispatcher());
                GONetMain.EventBus.RegisterRpcMetadata(typeof(CircularMotion), Metadata);
                RegisterRpcHandlers();
                GONetLog.Debug("Initialized RPC dispatcher for CircularMotion");
            }
        }

        internal static void EnsureInitialized()
        {
            _ = Metadata;
        }

        private static void RegisterRpcHandlers()
        {
            var eventBus = GONetMain.EventBus;
        }
    }

}
