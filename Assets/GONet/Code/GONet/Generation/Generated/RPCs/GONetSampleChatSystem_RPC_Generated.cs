// GENERATED BY GONet - DO NOT EDIT
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using UnityEngine;
using GONet;
using GONet.Utils;
using MemoryPack;

namespace GONet
{
    internal static class GONetSampleChatSystem_RpcIds
    {
        // Base class RPC IDs
        internal const uint GetFullRpcValidationReport_RpcId = 0xBCF6ED9A;

        // Derived class RPC IDs
        internal const uint BroadcastParticipantUpdate_RpcId = 0x2AEBE38A;
        internal const uint CreateChannel_RpcId = 0xBEFD70AE;
        internal const uint OnChannelCreated_RpcId = 0xE3C7AFDB;
        internal const uint RegisterParticipant_RpcId = 0x63D1F3AF;
        internal const uint SendMessage_RpcId = 0x926EA568;
        internal const uint SendMessage_TEST_RpcId = 0x6460B915;
        internal const uint SendMessage_TEST_VOID_RpcId = 0xC3957BB0;
    }

    internal static class GONetSampleChatSystem_RpcInitializer
    {
        [UnityEngine.RuntimeInitializeOnLoadMethod(UnityEngine.RuntimeInitializeLoadType.BeforeSceneLoad)]
        private static void Initialize()
        {
            GONetSampleChatSystem_RpcDispatcher.EnsureInitialized();
        }
    }

    internal class GONetSampleChatSystem_RpcDispatcher : IRpcDispatcher
    {
        private static bool isInitialized = false;

        private const string BROADCASTPARTICIPANTUPDATE = nameof(GONetSampleChatSystem.BroadcastParticipantUpdate);
        private const string CREATECHANNEL = nameof(GONetSampleChatSystem.CreateChannel);
        private const string ONCHANNELCREATED = nameof(GONetSampleChatSystem.OnChannelCreated);
        private const string REGISTERPARTICIPANT = nameof(GONetSampleChatSystem.RegisterParticipant);
        private const string SENDMESSAGE = nameof(GONetSampleChatSystem.SendMessage);
        private const string SENDMESSAGE_TEST = nameof(GONetSampleChatSystem.SendMessage_TEST);
        private const string SENDMESSAGE_TEST_VOID = nameof(GONetSampleChatSystem.SendMessage_TEST_VOID);

        // Property accessor delegates for single targets
        private static readonly Dictionary<string, Func<object, ushort>> TargetPropertyAccessors = 
            new Dictionary<string, Func<object, ushort>>
        {
        };

        // Property accessor delegates for multiple targets (fills buffer, returns count)
        private static readonly Dictionary<string, Func<object, ushort[], int>> MultiTargetPropertyAccessors = 
            new Dictionary<string, Func<object, ushort[], int>>
        {
            { nameof(GONetSampleChatSystem.SendMessage), 
              (obj, buffer) => 
              {
                  var list = ((GONetSampleChatSystem)obj).CurrentMessageTargets;
                  if (list == null) return 0;
                  int count = Math.Min(list.Count, buffer.Length);
                  for (int i = 0; i < count; i++) buffer[i] = list[i];
                  return count;
              } },
            { nameof(GONetSampleChatSystem.SendMessage_TEST), 
              (obj, buffer) => 
              {
                  var list = ((GONetSampleChatSystem)obj).CurrentMessageTargets;
                  if (list == null) return 0;
                  int count = Math.Min(list.Count, buffer.Length);
                  for (int i = 0; i < count; i++) buffer[i] = list[i];
                  return count;
              } },
            { nameof(GONetSampleChatSystem.SendMessage_TEST_VOID), 
              (obj, buffer) => 
              {
                  var list = ((GONetSampleChatSystem)obj).CurrentMessageTargets;
                  if (list == null) return 0;
                  int count = Math.Min(list.Count, buffer.Length);
                  for (int i = 0; i < count; i++) buffer[i] = list[i];
                  return count;
              } },
        };

        // Parameter count metadata for validators
        private static readonly Dictionary<string, int> ValidatorParameterCounts = 
            new Dictionary<string, int>
        {
            { nameof(GONetSampleChatSystem.SendMessage), 5 },
            { nameof(GONetSampleChatSystem.SendMessage_TEST), 0 },
            { nameof(GONetSampleChatSystem.SendMessage_TEST_VOID), 0 },
        };

        // Validation delegates that return full validation results with parameter-specific signatures
        private static readonly Dictionary<string, object> EnhancedValidators = 
            new Dictionary<string, object>
        {
            { nameof(GONetSampleChatSystem.SendMessage),
              (Func<object, ushort, ushort[], int, byte[], RpcValidationResult>)((obj, source, targets, count, data) =>
              {
                  var instance = (GONetSampleChatSystem)obj;
                  var result = RpcValidationResult.CreatePreAllocated(count);
                  
                  var validationContext = new RpcValidationContext
                  {
                      SourceAuthorityId = source,
                      TargetAuthorityIds = targets,
                      TargetCount = count,
                      PreAllocatedResult = result
                  };
                  
                  try
                  {
                      GONetMain.EventBus.SetValidationContext(validationContext);
                      var args = SerializationUtils.DeserializeFromBytes<GONetSampleChatSystem_SendMessage_RpcData>(data);
                      var content = args.content;
                      var channelName = args.channelName;
                      var messageType = args.messageType;
                      var fromUserId = args.fromUserId;
                      var recipients = args.recipients;
                      result = instance.ValidateMessage(ref content, ref channelName, ref messageType, ref fromUserId, ref recipients);
                      
                      if (result.WasModified)
                      {
                          args.content = content;
                          args.channelName = channelName;
                          args.messageType = messageType;
                          args.fromUserId = fromUserId;
                          args.recipients = recipients;
                          int bytesUsed;
                          bool needsReturn;
                          result.ModifiedData = SerializationUtils.SerializeToBytes(args, out bytesUsed, out needsReturn);
                      }
                      return result;
                  }
                  finally
                  {
                      GONetMain.EventBus.ClearValidationContext();
                  }
              })
            },
            { nameof(GONetSampleChatSystem.SendMessage_TEST),
              (Func<object, ushort, ushort[], int, RpcValidationResult>)((obj, source, targets, count) =>
              {
                  var instance = (GONetSampleChatSystem)obj;
                  var result = RpcValidationResult.CreatePreAllocated(count);
                  
                  var validationContext = new RpcValidationContext
                  {
                      SourceAuthorityId = source,
                      TargetAuthorityIds = targets,
                      TargetCount = count,
                      PreAllocatedResult = result
                  };
                  
                  try
                  {
                      GONetMain.EventBus.SetValidationContext(validationContext);
                      result = instance.ValidateMessage_TEST_EMPTY();
                      return result;
                  }
                  finally
                  {
                      GONetMain.EventBus.ClearValidationContext();
                  }
              })
            },
            { nameof(GONetSampleChatSystem.SendMessage_TEST_VOID),
              (Func<object, ushort, ushort[], int, RpcValidationResult>)((obj, source, targets, count) =>
              {
                  var instance = (GONetSampleChatSystem)obj;
                  var result = RpcValidationResult.CreatePreAllocated(count);
                  
                  var validationContext = new RpcValidationContext
                  {
                      SourceAuthorityId = source,
                      TargetAuthorityIds = targets,
                      TargetCount = count,
                      PreAllocatedResult = result
                  };
                  
                  try
                  {
                      GONetMain.EventBus.SetValidationContext(validationContext);
                      result = instance.ValidateMessage_TEST_EMPTY_VOID();
                      return result;
                  }
                  finally
                  {
                      GONetMain.EventBus.ClearValidationContext();
                  }
              })
            },
        };

        public static readonly Dictionary<string, RpcMetadata> Metadata = new Dictionary<string, RpcMetadata>
        {
            // Base class RPCs
            { nameof(GONetParticipantCompanionBehaviour.GetFullRpcValidationReport), new RpcMetadata { 
                Type = RpcType.ServerRpc, 
                IsReliable = true, 
                IsMineRequired = true, 
                IsPersistent = false, 
                Target = RpcTarget.All, 
                TargetPropertyName = null,
                IsMultipleTargets = false,
                ValidationMethodName = null,
                ExpectsDeliveryReport = false
            }},
            // Derived class RPCs
            { nameof(GONetSampleChatSystem.BroadcastParticipantUpdate), new RpcMetadata { 
                Type = RpcType.ClientRpc, 
                IsReliable = true, 
                IsMineRequired = false, 
                IsPersistent = true, 
                Target = RpcTarget.All, 
                TargetPropertyName = null,
                IsMultipleTargets = false,
                ValidationMethodName = null,
                ExpectsDeliveryReport = false
            }},
            { nameof(GONetSampleChatSystem.CreateChannel), new RpcMetadata { 
                Type = RpcType.ServerRpc, 
                IsReliable = true, 
                IsMineRequired = false, 
                IsPersistent = false, 
                Target = RpcTarget.All, 
                TargetPropertyName = null,
                IsMultipleTargets = false,
                ValidationMethodName = null,
                ExpectsDeliveryReport = false
            }},
            { nameof(GONetSampleChatSystem.OnChannelCreated), new RpcMetadata { 
                Type = RpcType.ClientRpc, 
                IsReliable = true, 
                IsMineRequired = false, 
                IsPersistent = true, 
                Target = RpcTarget.All, 
                TargetPropertyName = null,
                IsMultipleTargets = false,
                ValidationMethodName = null,
                ExpectsDeliveryReport = false
            }},
            { nameof(GONetSampleChatSystem.RegisterParticipant), new RpcMetadata { 
                Type = RpcType.ServerRpc, 
                IsReliable = true, 
                IsMineRequired = false, 
                IsPersistent = false, 
                Target = RpcTarget.All, 
                TargetPropertyName = null,
                IsMultipleTargets = false,
                ValidationMethodName = null,
                ExpectsDeliveryReport = false
            }},
            { nameof(GONetSampleChatSystem.SendMessage), new RpcMetadata { 
                Type = RpcType.TargetRpc, 
                IsReliable = true, 
                IsMineRequired = false, 
                IsPersistent = false, 
                Target = RpcTarget.MultipleAuthorities, 
                TargetPropertyName = "CurrentMessageTargets",
                IsMultipleTargets = true,
                ValidationMethodName = "ValidateMessage",
                ExpectsDeliveryReport = true
            }},
            { nameof(GONetSampleChatSystem.SendMessage_TEST), new RpcMetadata { 
                Type = RpcType.TargetRpc, 
                IsReliable = true, 
                IsMineRequired = false, 
                IsPersistent = false, 
                Target = RpcTarget.MultipleAuthorities, 
                TargetPropertyName = "CurrentMessageTargets",
                IsMultipleTargets = true,
                ValidationMethodName = "ValidateMessage_TEST_EMPTY",
                ExpectsDeliveryReport = true
            }},
            { nameof(GONetSampleChatSystem.SendMessage_TEST_VOID), new RpcMetadata { 
                Type = RpcType.TargetRpc, 
                IsReliable = true, 
                IsMineRequired = false, 
                IsPersistent = false, 
                Target = RpcTarget.MultipleAuthorities, 
                TargetPropertyName = "CurrentMessageTargets",
                IsMultipleTargets = true,
                ValidationMethodName = "ValidateMessage_TEST_EMPTY_VOID",
                ExpectsDeliveryReport = false
            }},
        };

        public void Dispatch0(object instance, string methodName)
        {
            var typed = (GONetSampleChatSystem)instance;
            switch (methodName)
            {
                case REGISTERPARTICIPANT:
                    typed.RegisterParticipant();
                    break;
                case SENDMESSAGE_TEST:
                    break;
                case SENDMESSAGE_TEST_VOID:
                    typed.SendMessage_TEST_VOID();
                    break;
            }
        }

        public void Dispatch1<T1>(object instance, string methodName, T1 arg1)
        {
            var typed = (GONetSampleChatSystem)instance;
            switch (methodName)
            {
                case BROADCASTPARTICIPANTUPDATE:
                    typed.BroadcastParticipantUpdate((ChatParticipant[])(object)arg1);
                    break;
                case CREATECHANNEL:
                    typed.CreateChannel((System.String)(object)arg1);
                    break;
                case ONCHANNELCREATED:
                    typed.OnChannelCreated((ChatChannel)(object)arg1);
                    break;
            }
        }

        public void Dispatch2<T1, T2>(object instance, string methodName, T1 arg1, T2 arg2)
        {
        }

        public void Dispatch3<T1, T2, T3>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3)
        {
        }

        public void Dispatch4<T1, T2, T3, T4>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
        }

        public void Dispatch5<T1, T2, T3, T4, T5>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            var typed = (GONetSampleChatSystem)instance;
            switch (methodName)
            {
                case SENDMESSAGE:
                    break;
            }
        }

        public void Dispatch6<T1, T2, T3, T4, T5, T6>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
        }

        public void Dispatch7<T1, T2, T3, T4, T5, T6, T7>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
        }

        public void Dispatch8<T1, T2, T3, T4, T5, T6, T7, T8>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
        }

        public async Task<TResult> DispatchAsync0<TResult>(object instance, string methodName)
        {
            var typed = (GONetSampleChatSystem)instance;
            switch (methodName)
            {
                case SENDMESSAGE_TEST:
                    return (TResult)(object)await typed.SendMessage_TEST();
                default:
                    return default(TResult);
            }
        }

        public async Task<TResult> DispatchAsync1<TResult, T1>(object instance, string methodName, T1 arg1)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync2<TResult, T1, T2>(object instance, string methodName, T1 arg1, T2 arg2)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync3<TResult, T1, T2, T3>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync4<TResult, T1, T2, T3, T4>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync5<TResult, T1, T2, T3, T4, T5>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
        {
            var typed = (GONetSampleChatSystem)instance;
            switch (methodName)
            {
                case SENDMESSAGE:
                    return (TResult)(object)await typed.SendMessage((System.String)(object)arg1, (System.String)(object)arg2, (GONetSampleChatSystem.ChatType)(object)arg3, (System.UInt16)(object)arg4, (System.UInt16[])(object)arg5);
                default:
                    return default(TResult);
            }
        }

        public async Task<TResult> DispatchAsync6<TResult, T1, T2, T3, T4, T5, T6>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync7<TResult, T1, T2, T3, T4, T5, T6, T7>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
        {
            return default(TResult);
        }

        public async Task<TResult> DispatchAsync8<TResult, T1, T2, T3, T4, T5, T6, T7, T8>(object instance, string methodName, T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
        {
            return default(TResult);
        }


        static GONetSampleChatSystem_RpcDispatcher()
        {
            if (!isInitialized)
            {
                isInitialized = true;
                GONetMain.EventBus.RegisterRpcIdMapping(0xBCF6ED9A, nameof(GONetParticipantCompanionBehaviour.GetFullRpcValidationReport), typeof(GONetSampleChatSystem));
                GONetMain.EventBus.RegisterRpcIdMapping(0x2AEBE38A, nameof(GONetSampleChatSystem.BroadcastParticipantUpdate), typeof(GONetSampleChatSystem));
                GONetMain.EventBus.RegisterRpcIdMapping(0xBEFD70AE, nameof(GONetSampleChatSystem.CreateChannel), typeof(GONetSampleChatSystem));
                GONetMain.EventBus.RegisterRpcIdMapping(0xE3C7AFDB, nameof(GONetSampleChatSystem.OnChannelCreated), typeof(GONetSampleChatSystem));
                GONetMain.EventBus.RegisterRpcIdMapping(0x63D1F3AF, nameof(GONetSampleChatSystem.RegisterParticipant), typeof(GONetSampleChatSystem));
                GONetMain.EventBus.RegisterRpcIdMapping(0x926EA568, nameof(GONetSampleChatSystem.SendMessage), typeof(GONetSampleChatSystem));
                GONetMain.EventBus.RegisterRpcIdMapping(0x6460B915, nameof(GONetSampleChatSystem.SendMessage_TEST), typeof(GONetSampleChatSystem));
                GONetMain.EventBus.RegisterRpcIdMapping(0xC3957BB0, nameof(GONetSampleChatSystem.SendMessage_TEST_VOID), typeof(GONetSampleChatSystem));
                GONetMain.EventBus.RegisterRpcDispatcher(typeof(GONetSampleChatSystem), new GONetSampleChatSystem_RpcDispatcher());
                GONetMain.EventBus.RegisterRpcMetadata(typeof(GONetSampleChatSystem), Metadata);
                if (TargetPropertyAccessors.Count > 0)
                    GONetMain.EventBus.RegisterTargetPropertyAccessors(typeof(GONetSampleChatSystem), TargetPropertyAccessors);
                if (MultiTargetPropertyAccessors.Count > 0)
                    GONetMain.EventBus.RegisterMultiTargetPropertyAccessors(typeof(GONetSampleChatSystem), MultiTargetPropertyAccessors);
                if (EnhancedValidators.Count > 0)
                    GONetMain.EventBus.RegisterEnhancedValidators(typeof(GONetSampleChatSystem), EnhancedValidators, ValidatorParameterCounts);
                RegisterRpcHandlers();
                GONetLog.Debug("Initialized RPC dispatcher for GONetSampleChatSystem");
            }
        }

        internal static void EnsureInitialized()
        {
            _ = Metadata;
        }

        private static void RegisterRpcHandlers()
        {
            var eventBus = GONetMain.EventBus;
            eventBus.RegisterRpcHandler(GONetSampleChatSystem_RpcIds.BroadcastParticipantUpdate_RpcId, async (envelope) =>
            {
                var rpcEvent = envelope.Event;
                var instance = GONetMain.GetGONetParticipantById(rpcEvent.GONetId)?.GetComponent<GONetSampleChatSystem>();
                if (instance == null) return;

                var args = SerializationUtils.DeserializeFromBytes<GONetSampleChatSystem_BroadcastParticipantUpdate_RpcData>(rpcEvent.Data);
                instance.BroadcastParticipantUpdate(args.allParticipants);
            });
            eventBus.RegisterRpcHandler(GONetSampleChatSystem_RpcIds.CreateChannel_RpcId, async (envelope) =>
            {
                var rpcEvent = envelope.Event;
                var instance = GONetMain.GetGONetParticipantById(rpcEvent.GONetId)?.GetComponent<GONetSampleChatSystem>();
                if (instance == null) return;

                var args = SerializationUtils.DeserializeFromBytes<GONetSampleChatSystem_CreateChannel_RpcData>(rpcEvent.Data);
                instance.CreateChannel(args.channelName);
            });
            eventBus.RegisterRpcHandler(GONetSampleChatSystem_RpcIds.OnChannelCreated_RpcId, async (envelope) =>
            {
                var rpcEvent = envelope.Event;
                var instance = GONetMain.GetGONetParticipantById(rpcEvent.GONetId)?.GetComponent<GONetSampleChatSystem>();
                if (instance == null) return;

                var args = SerializationUtils.DeserializeFromBytes<GONetSampleChatSystem_OnChannelCreated_RpcData>(rpcEvent.Data);
                instance.OnChannelCreated(args.channel);
            });
            eventBus.RegisterRpcHandler(GONetSampleChatSystem_RpcIds.RegisterParticipant_RpcId, async (envelope) =>
            {
                var rpcEvent = envelope.Event;
                var instance = GONetMain.GetGONetParticipantById(rpcEvent.GONetId)?.GetComponent<GONetSampleChatSystem>();
                if (instance == null) return;

                instance.RegisterParticipant();
            });
            eventBus.RegisterRpcHandler(GONetSampleChatSystem_RpcIds.SendMessage_RpcId, async (envelope) =>
            {
                var rpcEvent = envelope.Event;
                var instance = GONetMain.GetGONetParticipantById(rpcEvent.GONetId)?.GetComponent<GONetSampleChatSystem>();
                if (instance == null) return;

                // NO more route VALIDATION HERE - if we received it, we're a valid target!
                // The server already validated during routing

                var args = SerializationUtils.DeserializeFromBytes<GONetSampleChatSystem_SendMessage_RpcData>(rpcEvent.Data);
                var result = await instance.SendMessage(args.content, args.channelName, args.messageType, args.fromUserId, args.recipients);

                // Only send response to remote clients, not to server itself
                if (rpcEvent.CorrelationId != 0 && envelope.SourceAuthorityId != GONetMain.MyAuthorityId)
                {
                    int bytesUsed;
                    bool needsReturn;
                    byte[] responseData = SerializationUtils.SerializeToBytes(result, out bytesUsed, out needsReturn);

                    var response = RpcResponseEvent.Borrow();
                    response.OccurredAtElapsedTicks = GONetMain.Time.ElapsedTicks;
                    response.CorrelationId = rpcEvent.CorrelationId;
                    response.Success = true;
                    response.Data = responseData;

                    eventBus.Publish(response, targetClientAuthorityId: envelope.SourceAuthorityId, shouldPublishReliably: true);
                    // Publish auto-returns the event and the data
                }
            });
            eventBus.RegisterRpcHandler(GONetSampleChatSystem_RpcIds.SendMessage_TEST_RpcId, async (envelope) =>
            {
                var rpcEvent = envelope.Event;
                var instance = GONetMain.GetGONetParticipantById(rpcEvent.GONetId)?.GetComponent<GONetSampleChatSystem>();
                if (instance == null) return;

                // NO more route VALIDATION HERE - if we received it, we're a valid target!
                // The server already validated during routing

                var result = await instance.SendMessage_TEST();

                // Only send response to remote clients, not to server itself
                if (rpcEvent.CorrelationId != 0 && envelope.SourceAuthorityId != GONetMain.MyAuthorityId)
                {
                    int bytesUsed;
                    bool needsReturn;
                    byte[] responseData = SerializationUtils.SerializeToBytes(result, out bytesUsed, out needsReturn);

                    var response = RpcResponseEvent.Borrow();
                    response.OccurredAtElapsedTicks = GONetMain.Time.ElapsedTicks;
                    response.CorrelationId = rpcEvent.CorrelationId;
                    response.Success = true;
                    response.Data = responseData;

                    eventBus.Publish(response, targetClientAuthorityId: envelope.SourceAuthorityId, shouldPublishReliably: true);
                    // Publish auto-returns the event and the data
                }
            });
            eventBus.RegisterRpcHandler(GONetSampleChatSystem_RpcIds.SendMessage_TEST_VOID_RpcId, async (envelope) =>
            {
                var rpcEvent = envelope.Event;
                var instance = GONetMain.GetGONetParticipantById(rpcEvent.GONetId)?.GetComponent<GONetSampleChatSystem>();
                if (instance == null) return;

                // NO more route VALIDATION HERE - if we received it, we're a valid target!
                // The server already validated during routing

                instance.SendMessage_TEST_VOID();
            });
        }
    }

    [MemoryPackable]
    public partial struct GONetSampleChatSystem_BroadcastParticipantUpdate_RpcData
    {
        public ChatParticipant[] allParticipants { get; set; }
    }

    [MemoryPackable]
    public partial struct GONetSampleChatSystem_CreateChannel_RpcData
    {
        public System.String channelName { get; set; }
    }

    [MemoryPackable]
    public partial struct GONetSampleChatSystem_OnChannelCreated_RpcData
    {
        public ChatChannel channel { get; set; }
    }

    [MemoryPackable]
    public partial struct GONetSampleChatSystem_SendMessage_RpcData
    {
        public System.String content { get; set; }
        public System.String channelName { get; set; }
        public GONetSampleChatSystem.ChatType messageType { get; set; }
        public System.UInt16 fromUserId { get; set; }
        public System.UInt16[] recipients { get; set; }
    }

}
